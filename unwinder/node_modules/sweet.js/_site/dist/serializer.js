"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializer = exports.makeDeserializer = undefined;

var _transitJs = require("transit-js");

var _transitJs2 = _interopRequireDefault(_transitJs);

var _immutable = require("immutable");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _symbol = require("./symbol");

var _tokenizer = require("shift-parser/dist/tokenizer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var typeMap_466 = [_tokenizer.TokenType.STRING, _tokenizer.TokenType.EOS, _tokenizer.TokenType.LPAREN, _tokenizer.TokenType.RPAREN, _tokenizer.TokenType.LBRACK, _tokenizer.TokenType.RBRACK, _tokenizer.TokenType.LBRACE, _tokenizer.TokenType.RBRACE, _tokenizer.TokenType.COLON, _tokenizer.TokenType.SEMICOLON, _tokenizer.TokenType.PERIOD, _tokenizer.TokenType.ELLIPSIS, _tokenizer.TokenType.ARROW, _tokenizer.TokenType.CONDITIONAL, _tokenizer.TokenType.INC, _tokenizer.TokenType.DEC, _tokenizer.TokenType.ASSIGN, _tokenizer.TokenType.ASSIGN_BIT_OR, _tokenizer.TokenType.ASSIGN_BIT_XOR, _tokenizer.TokenType.ASSIGN_BIT_AND, _tokenizer.TokenType.ASSIGN_SHL, _tokenizer.TokenType.ASSIGN_SHR, _tokenizer.TokenType.ASSIGN_SHR_UNSIGNED, _tokenizer.TokenType.ASSIGN_ADD, _tokenizer.TokenType.ASSIGN_SUB, _tokenizer.TokenType.ASSIGN_MUL, _tokenizer.TokenType.ASSIGN_DIV, _tokenizer.TokenType.ASSIGN_MOD, _tokenizer.TokenType.COMMA, _tokenizer.TokenType.OR, _tokenizer.TokenType.AND, _tokenizer.TokenType.BIT_OR, _tokenizer.TokenType.BIT_XOR, _tokenizer.TokenType.BIT_AND, _tokenizer.TokenType.SHL, _tokenizer.TokenType.SHR, _tokenizer.TokenType.SHR_UNSIGNED, _tokenizer.TokenType.ADD, _tokenizer.TokenType.SUB, _tokenizer.TokenType.MUL, _tokenizer.TokenType.DIV, _tokenizer.TokenType.MOD, _tokenizer.TokenType.EQ, _tokenizer.TokenType.NE, _tokenizer.TokenType.EQ_STRICT, _tokenizer.TokenType.NE_STRICT, _tokenizer.TokenType.LT, _tokenizer.TokenType.GT, _tokenizer.TokenType.LTE, _tokenizer.TokenType.GTE, _tokenizer.TokenType.INSTANCEOF, _tokenizer.TokenType.IN, _tokenizer.TokenType.NOT, _tokenizer.TokenType.BIT_NOT, _tokenizer.TokenType.AWAIT, _tokenizer.TokenType.DELETE, _tokenizer.TokenType.TYPEOF, _tokenizer.TokenType.VOID, _tokenizer.TokenType.BREAK, _tokenizer.TokenType.CASE, _tokenizer.TokenType.CATCH, _tokenizer.TokenType.CLASS, _tokenizer.TokenType.CONTINUE, _tokenizer.TokenType.DEBUGGER, _tokenizer.TokenType.DEFAULT, _tokenizer.TokenType.DO, _tokenizer.TokenType.ELSE, _tokenizer.TokenType.EXPORT, _tokenizer.TokenType.EXTENDS, _tokenizer.TokenType.FINALLY, _tokenizer.TokenType.FOR, _tokenizer.TokenType.FUNCTION, _tokenizer.TokenType.IF, _tokenizer.TokenType.IMPORT, _tokenizer.TokenType.LET, _tokenizer.TokenType.NEW, _tokenizer.TokenType.RETURN, _tokenizer.TokenType.SUPER, _tokenizer.TokenType.SWITCH, _tokenizer.TokenType.THIS, _tokenizer.TokenType.THROW, _tokenizer.TokenType.TRY, _tokenizer.TokenType.VAR, _tokenizer.TokenType.WHILE, _tokenizer.TokenType.WITH, _tokenizer.TokenType.NULL, _tokenizer.TokenType.TRUE, _tokenizer.TokenType.FALSE, _tokenizer.TokenType.YIELD, _tokenizer.TokenType.NUMBER, _tokenizer.TokenType.STRING, _tokenizer.TokenType.REGEXP, _tokenizer.TokenType.IDENTIFIER, _tokenizer.TokenType.CONST, _tokenizer.TokenType.TEMPLATE, _tokenizer.TokenType.ILLEGAL];
var ListHandler_467 = _transitJs2.default.makeWriteHandler({ tag: function tag() {
    return "array";
  }, rep: function rep(v_472) {
    return v_472;
  } });
var SyntaxHandler_468 = _transitJs2.default.makeWriteHandler({ tag: function tag() {
    return "stx";
  }, rep: function rep(v_473) {
    if (_immutable.List.isList(v_473.token)) {
      return [v_473.token, v_473.context.scopeset];
    } else {
      var t = _transitJs2.default.objectToMap(v_473.token);
      t.set("type", typeMap_466.indexOf(v_473.token.type));
      return [t, v_473.context.scopeset];
    }
  } });
var SymbolHandler_469 = _transitJs2.default.makeWriteHandler({ tag: function tag() {
    return "symb";
  }, rep: function rep(v_474) {
    return [v_474.name];
  } });
var writer_470 = _transitJs2.default.writer("json", { handlers: _transitJs2.default.map([_immutable.List, ListHandler_467, _syntax2.default, SyntaxHandler_468, _symbol.SymbolClass, SymbolHandler_469]) });
function makeReader_471(bindings_475) {
  return _transitJs2.default.reader("json", { arrayBuilder: { init: function init(node_476) {
        return (0, _immutable.List)().asMutable();
      }, add: function add(ret_477, val_478, node_479) {
        return ret_477.push(val_478);
      }, finalize: function finalize(ret_480, node_481) {
        return ret_480.asImmutable();
      }, fromArray: function fromArray(arr_482, node_483) {
        return (0, _immutable.List)(arr_482);
      } }, handlers: { stx: function stx(rep_484) {
        if (_immutable.List.isList(rep_484[0])) {
          var token = rep_484[0];
          return new _syntax2.default(token, { bindings: bindings_475, scopeset: rep_484[1] });
        } else {
          var _token = _transitJs2.default.mapToObject(rep_484[0]);
          _token.type = typeMap_466[rep_484[0].get("type")];
          _token.slice = rep_484[0].has("slice") ? _transitJs2.default.mapToObject(rep_484[0].get("slice")) : undefined;
          return new _syntax2.default(_token, { bindings: bindings_475, scopeset: rep_484[1] });
        }
      }, symb: function symb(rep_485) {
        return (0, _symbol.Symbol)(rep_485[0]);
      } } });
}
exports.makeDeserializer = makeReader_471;
exports.serializer = writer_470;
//# sourceMappingURL=data:application/json;base64,