import {List} from "immutable";
import Env from "./env";
import Reader from "./shift-reader";
import  * as _ from "ramda";
import TokenExpander from "./token-expander.js";
import BindingMap from "./binding-map.js";
import Term, {isEOF, isBindingIdentifier, isFunctionDeclaration, isFunctionExpression, isFunctionTerm, isFunctionWithName, isSyntaxDeclaration, isSyntaxrecDeclaration, isVariableDeclaration, isVariableDeclarationStatement, isImport, isExport} from "./terms";
import loadSyntax from "./load-syntax";
class Module_385 {
  constructor(moduleSpecifier_387, importEntries_388, exportEntries_389, body_390) {
    this.moduleSpecifier = moduleSpecifier_387;
    this.importEntries = importEntries_388;
    this.exportEntries = exportEntries_389;
    this.body = body_390;
  }
  visit(context_391) {
    this.exportEntries.forEach(ex_392 => {
      if (isSyntaxDeclaration(ex_392.declaration) || isSyntaxrecDeclaration(ex_392.declaration)) {
        ex_392.declaration.declarators.forEach(loadSyntax(_.__, context_391, context_391.store));
      }
    });
    return context_391.store;
  }
}
const pragmaRegep_386 = /^\s*#\w*/;
export class Modules {
  constructor() {
    this.loadedModules = new Map;
  }
  load(modulePath_393, context_394) {
    let path_395 = context_394.moduleResolver(modulePath_393, context_394.cwd);
    if (!this.loadedModules.has(path_395)) {
      let modStr = context_394.moduleLoader(path_395);
      if (!pragmaRegep_386.test(modStr)) {
        this.loadedModules.set(path_395, new Module_385(path_395, List(), List(), List()));
      } else {
        let reader = new Reader(modStr);
        let stxl = reader.read().slice(3);
        let tokenExpander = new TokenExpander(_.merge(context_394, {env: new Env, store: new Env, bindings: new BindingMap}));
        let terms = tokenExpander.expand(stxl);
        let importEntries = [];
        let exportEntries = [];
        terms.forEach(t_396 => {
          _.cond([[isImport, t_397 => importEntries.push(t_397)], [isExport, t_398 => exportEntries.push(t_398)]])(t_396);
        });
        this.loadedModules.set(path_395, new Module_385(path_395, List(importEntries), List(exportEntries), terms));
      }
    }
    return this.loadedModules.get(path_395);
  }
}
