import {List} from "immutable";
import Term, {isEOF, isBindingIdentifier, isFunctionDeclaration, isFunctionExpression, isFunctionTerm, isFunctionWithName, isSyntaxDeclaration, isVariableDeclaration, isVariableDeclarationStatement, isImport, isExport} from "./terms";
import {Scope, freshScope} from "./scope";
import ApplyScopeInParamsReducer from "./apply-scope-in-params-reducer";
import reducer, {MonoidalReducer} from "shift-reducer";
import Expander from "./expander";
import Syntax from "./syntax";
import {serializer, makeDeserializer} from "./serializer";
import {enforestExpr, Enforester} from "./enforester";
import {assert} from "./errors";
import {processTemplate} from "./template-processor.js";
export default class TermExpander {
  constructor(context_721) {
    this.context = context_721;
  }
  expand(term_722) {
    let field_723 = "expand" + term_722.type;
    if (typeof this[field_723] === "function") {
      return this[field_723](term_722);
    }
    assert(false, "expand not implemented yet for: " + term_722.type);
  }
  expandTemplateExpression(term_724) {
    return new Term("TemplateExpression", {tag: term_724.tag == null ? null : this.expand(term_724.tag), elements: term_724.elements.toArray()});
  }
  expandBreakStatement(term_725) {
    return new Term("BreakStatement", {label: term_725.label ? term_725.label.val() : null});
  }
  expandDoWhileStatement(term_726) {
    return new Term("DoWhileStatement", {body: this.expand(term_726.body), test: this.expand(term_726.test)});
  }
  expandWithStatement(term_727) {
    return new Term("WithStatement", {body: this.expand(term_727.body), object: this.expand(term_727.object)});
  }
  expandDebuggerStatement(term_728) {
    return term_728;
  }
  expandContinueStatement(term_729) {
    return new Term("ContinueStatement", {label: term_729.label ? term_729.label.val() : null});
  }
  expandSwitchStatementWithDefault(term_730) {
    return new Term("SwitchStatementWithDefault", {discriminant: this.expand(term_730.discriminant), preDefaultCases: term_730.preDefaultCases.map(c_731 => this.expand(c_731)).toArray(), defaultCase: this.expand(term_730.defaultCase), postDefaultCases: term_730.postDefaultCases.map(c_732 => this.expand(c_732)).toArray()});
  }
  expandComputedMemberExpression(term_733) {
    return new Term("ComputedMemberExpression", {object: this.expand(term_733.object), expression: this.expand(term_733.expression)});
  }
  expandSwitchStatement(term_734) {
    return new Term("SwitchStatement", {discriminant: this.expand(term_734.discriminant), cases: term_734.cases.map(c_735 => this.expand(c_735)).toArray()});
  }
  expandFormalParameters(term_736) {
    let rest_737 = term_736.rest == null ? null : this.expand(term_736.rest);
    return new Term("FormalParameters", {items: term_736.items.map(i_738 => this.expand(i_738)), rest: rest_737});
  }
  expandArrowExpression(term_739) {
    return this.doFunctionExpansion(term_739, "ArrowExpression");
  }
  expandSwitchDefault(term_740) {
    return new Term("SwitchDefault", {consequent: term_740.consequent.map(c_741 => this.expand(c_741)).toArray()});
  }
  expandSwitchCase(term_742) {
    return new Term("SwitchCase", {test: this.expand(term_742.test), consequent: term_742.consequent.map(c_743 => this.expand(c_743)).toArray()});
  }
  expandForInStatement(term_744) {
    return new Term("ForInStatement", {left: this.expand(term_744.left), right: this.expand(term_744.right), body: this.expand(term_744.body)});
  }
  expandTryCatchStatement(term_745) {
    return new Term("TryCatchStatement", {body: this.expand(term_745.body), catchClause: this.expand(term_745.catchClause)});
  }
  expandTryFinallyStatement(term_746) {
    let catchClause_747 = term_746.catchClause == null ? null : this.expand(term_746.catchClause);
    return new Term("TryFinallyStatement", {body: this.expand(term_746.body), catchClause: catchClause_747, finalizer: this.expand(term_746.finalizer)});
  }
  expandCatchClause(term_748) {
    return new Term("CatchClause", {binding: this.expand(term_748.binding), body: this.expand(term_748.body)});
  }
  expandThrowStatement(term_749) {
    return new Term("ThrowStatement", {expression: this.expand(term_749.expression)});
  }
  expandForOfStatement(term_750) {
    return new Term("ForOfStatement", {left: this.expand(term_750.left), right: this.expand(term_750.right), body: this.expand(term_750.body)});
  }
  expandBindingIdentifier(term_751) {
    return term_751;
  }
  expandBindingPropertyIdentifier(term_752) {
    return term_752;
  }
  expandBindingPropertyProperty(term_753) {
    return new Term("BindingPropertyProperty", {name: this.expand(term_753.name), binding: this.expand(term_753.binding)});
  }
  expandComputedPropertyName(term_754) {
    return new Term("ComputedPropertyName", {expression: this.expand(term_754.expression)});
  }
  expandObjectBinding(term_755) {
    return new Term("ObjectBinding", {properties: term_755.properties.map(t_756 => this.expand(t_756)).toArray()});
  }
  expandArrayBinding(term_757) {
    let restElement_758 = term_757.restElement == null ? null : this.expand(term_757.restElement);
    return new Term("ArrayBinding", {elements: term_757.elements.map(t_759 => t_759 == null ? null : this.expand(t_759)).toArray(), restElement: restElement_758});
  }
  expandBindingWithDefault(term_760) {
    return new Term("BindingWithDefault", {binding: this.expand(term_760.binding), init: this.expand(term_760.init)});
  }
  expandShorthandProperty(term_761) {
    return new Term("DataProperty", {name: new Term("StaticPropertyName", {value: term_761.name}), expression: new Term("IdentifierExpression", {name: term_761.name})});
  }
  expandForStatement(term_762) {
    let init_763 = term_762.init == null ? null : this.expand(term_762.init);
    let test_764 = term_762.test == null ? null : this.expand(term_762.test);
    let update_765 = term_762.update == null ? null : this.expand(term_762.update);
    let body_766 = this.expand(term_762.body);
    return new Term("ForStatement", {init: init_763, test: test_764, update: update_765, body: body_766});
  }
  expandYieldExpression(term_767) {
    let expr_768 = term_767.expression == null ? null : this.expand(term_767.expression);
    return new Term("YieldExpression", {expression: expr_768});
  }
  expandYieldGeneratorExpression(term_769) {
    let expr_770 = term_769.expression == null ? null : this.expand(term_769.expression);
    return new Term("YieldGeneratorExpression", {expression: expr_770});
  }
  expandWhileStatement(term_771) {
    return new Term("WhileStatement", {test: this.expand(term_771.test), body: this.expand(term_771.body)});
  }
  expandIfStatement(term_772) {
    let consequent_773 = term_772.consequent == null ? null : this.expand(term_772.consequent);
    let alternate_774 = term_772.alternate == null ? null : this.expand(term_772.alternate);
    return new Term("IfStatement", {test: this.expand(term_772.test), consequent: consequent_773, alternate: alternate_774});
  }
  expandBlockStatement(term_775) {
    return new Term("BlockStatement", {block: this.expand(term_775.block)});
  }
  expandBlock(term_776) {
    return new Term("Block", {statements: term_776.statements.map(s_777 => this.expand(s_777)).toArray()});
  }
  expandVariableDeclarationStatement(term_778) {
    return new Term("VariableDeclarationStatement", {declaration: this.expand(term_778.declaration)});
  }
  expandReturnStatement(term_779) {
    if (term_779.expression == null) {
      return term_779;
    }
    return new Term("ReturnStatement", {expression: this.expand(term_779.expression)});
  }
  expandClassDeclaration(term_780) {
    return new Term("ClassDeclaration", {name: term_780.name == null ? null : this.expand(term_780.name), super: term_780.super == null ? null : this.expand(term_780.super), elements: term_780.elements.map(el_781 => this.expand(el_781)).toArray()});
  }
  expandClassExpression(term_782) {
    return new Term("ClassExpression", {name: term_782.name == null ? null : this.expand(term_782.name), super: term_782.super == null ? null : this.expand(term_782.super), elements: term_782.elements.map(el_783 => this.expand(el_783)).toArray()});
  }
  expandClassElement(term_784) {
    return new Term("ClassElement", {isStatic: term_784.isStatic, method: this.expand(term_784.method)});
  }
  expandThisExpression(term_785) {
    return term_785;
  }
  expandSyntaxTemplate(term_786) {
    let expander_787 = new Expander(this.context);
    let r_788 = processTemplate(term_786.template.inner());
    let str_789 = Syntax.fromString(serializer.write(r_788.template));
    let callee_790 = new Term("IdentifierExpression", {name: Syntax.fromIdentifier("syntaxTemplate")});
    let expandedInterps_791 = r_788.interp.map(i_793 => {
      let enf_794 = new Enforester(i_793, List(), this.context);
      return this.expand(enf_794.enforest("expression"));
    });
    let args_792 = List.of(new Term("LiteralStringExpression", {value: str_789})).concat(expandedInterps_791);
    return new Term("CallExpression", {callee: callee_790, arguments: args_792});
  }
  expandSyntaxQuote(term_795) {
    let str_796 = new Term("LiteralStringExpression", {value: Syntax.fromString(serializer.write(term_795.name))});
    return new Term("TemplateExpression", {tag: term_795.template.tag, elements: term_795.template.elements.push(str_796).push(new Term("TemplateElement", {rawValue: ""})).toArray()});
  }
  expandStaticMemberExpression(term_797) {
    return new Term("StaticMemberExpression", {object: this.expand(term_797.object), property: term_797.property});
  }
  expandArrayExpression(term_798) {
    return new Term("ArrayExpression", {elements: term_798.elements.map(t_799 => t_799 == null ? t_799 : this.expand(t_799))});
  }
  expandImport(term_800) {
    return term_800;
  }
  expandImportNamespace(term_801) {
    return term_801;
  }
  expandExport(term_802) {
    return new Term("Export", {declaration: this.expand(term_802.declaration)});
  }
  expandExportDefault(term_803) {
    return new Term("ExportDefault", {body: this.expand(term_803.body)});
  }
  expandExportFrom(term_804) {
    return term_804;
  }
  expandExportAllFrom(term_805) {
    return term_805;
  }
  expandExportSpecifier(term_806) {
    return term_806;
  }
  expandStaticPropertyName(term_807) {
    return term_807;
  }
  expandDataProperty(term_808) {
    return new Term("DataProperty", {name: this.expand(term_808.name), expression: this.expand(term_808.expression)});
  }
  expandObjectExpression(term_809) {
    return new Term("ObjectExpression", {properties: term_809.properties.map(t_810 => this.expand(t_810))});
  }
  expandVariableDeclarator(term_811) {
    let init_812 = term_811.init == null ? null : this.expand(term_811.init);
    return new Term("VariableDeclarator", {binding: this.expand(term_811.binding), init: init_812});
  }
  expandVariableDeclaration(term_813) {
    return new Term("VariableDeclaration", {kind: term_813.kind, declarators: term_813.declarators.map(d_814 => this.expand(d_814))});
  }
  expandParenthesizedExpression(term_815) {
    if (term_815.inner.size === 0) {
      throw new Error("unexpected end of input");
    }
    let enf_816 = new Enforester(term_815.inner, List(), this.context);
    let lookahead_817 = enf_816.peek();
    let t_818 = enf_816.enforestExpression();
    if (t_818 == null || enf_816.rest.size > 0) {
      throw enf_816.createError(lookahead_817, "unexpected syntax");
    }
    return this.expand(t_818);
  }
  expandUnaryExpression(term_819) {
    return new Term("UnaryExpression", {operator: term_819.operator, operand: this.expand(term_819.operand)});
  }
  expandUpdateExpression(term_820) {
    return new Term("UpdateExpression", {isPrefix: term_820.isPrefix, operator: term_820.operator, operand: this.expand(term_820.operand)});
  }
  expandBinaryExpression(term_821) {
    let left_822 = this.expand(term_821.left);
    let right_823 = this.expand(term_821.right);
    return new Term("BinaryExpression", {left: left_822, operator: term_821.operator, right: right_823});
  }
  expandConditionalExpression(term_824) {
    return new Term("ConditionalExpression", {test: this.expand(term_824.test), consequent: this.expand(term_824.consequent), alternate: this.expand(term_824.alternate)});
  }
  expandNewTargetExpression(term_825) {
    return term_825;
  }
  expandNewExpression(term_826) {
    let callee_827 = this.expand(term_826.callee);
    let enf_828 = new Enforester(term_826.arguments, List(), this.context);
    let args_829 = enf_828.enforestArgumentList().map(arg_830 => this.expand(arg_830));
    return new Term("NewExpression", {callee: callee_827, arguments: args_829.toArray()});
  }
  expandSuper(term_831) {
    return term_831;
  }
  expandCallExpression(term_832) {
    let callee_833 = this.expand(term_832.callee);
    let enf_834 = new Enforester(term_832.arguments, List(), this.context);
    let args_835 = enf_834.enforestArgumentList().map(arg_836 => this.expand(arg_836));
    return new Term("CallExpression", {callee: callee_833, arguments: args_835});
  }
  expandSpreadElement(term_837) {
    return new Term("SpreadElement", {expression: this.expand(term_837.expression)});
  }
  expandExpressionStatement(term_838) {
    let child_839 = this.expand(term_838.expression);
    return new Term("ExpressionStatement", {expression: child_839});
  }
  expandLabeledStatement(term_840) {
    return new Term("LabeledStatement", {label: term_840.label.val(), body: this.expand(term_840.body)});
  }
  doFunctionExpansion(term_841, type_842) {
    let scope_843 = freshScope("fun");
    let red_844 = new ApplyScopeInParamsReducer(scope_843, this.context);
    let params_845;
    if (type_842 !== "Getter" && type_842 !== "Setter") {
      params_845 = red_844.transform(term_841.params);
      params_845 = this.expand(params_845);
    }
    this.context.currentScope.push(scope_843);
    let expander_846 = new Expander(this.context);
    let markedBody_847, bodyTerm_848;
    if (term_841.body instanceof Term) {
      bodyTerm_848 = this.expand(term_841.body.addScope(scope_843, this.context.bindings));
    } else {
      markedBody_847 = term_841.body.map(b_849 => b_849.addScope(scope_843, this.context.bindings));
      bodyTerm_848 = new Term("FunctionBody", {directives: List(), statements: expander_846.expand(markedBody_847)});
    }
    this.context.currentScope.pop();
    if (type_842 === "Getter") {
      return new Term(type_842, {name: this.expand(term_841.name), body: bodyTerm_848});
    } else if (type_842 === "Setter") {
      return new Term(type_842, {name: this.expand(term_841.name), param: term_841.param, body: bodyTerm_848});
    }
    return new Term(type_842, {name: term_841.name, isGenerator: term_841.isGenerator, params: params_845, body: bodyTerm_848});
  }
  expandMethod(term_850) {
    return this.doFunctionExpansion(term_850, "Method");
  }
  expandSetter(term_851) {
    return this.doFunctionExpansion(term_851, "Setter");
  }
  expandGetter(term_852) {
    return this.doFunctionExpansion(term_852, "Getter");
  }
  expandFunctionDeclaration(term_853) {
    return this.doFunctionExpansion(term_853, "FunctionDeclaration");
  }
  expandFunctionExpression(term_854) {
    return this.doFunctionExpansion(term_854, "FunctionExpression");
  }
  expandCompoundAssignmentExpression(term_855) {
    return new Term("CompoundAssignmentExpression", {binding: this.expand(term_855.binding), operator: term_855.operator, expression: this.expand(term_855.expression)});
  }
  expandAssignmentExpression(term_856) {
    return new Term("AssignmentExpression", {binding: this.expand(term_856.binding), expression: this.expand(term_856.expression)});
  }
  expandEmptyStatement(term_857) {
    return term_857;
  }
  expandLiteralBooleanExpression(term_858) {
    return term_858;
  }
  expandLiteralNumericExpression(term_859) {
    return term_859;
  }
  expandLiteralInfinityExpression(term_860) {
    return term_860;
  }
  expandIdentifierExpression(term_861) {
    let trans_862 = this.context.env.get(term_861.name.resolve());
    if (trans_862) {
      return new Term("IdentifierExpression", {name: trans_862.id});
    }
    return term_861;
  }
  expandLiteralNullExpression(term_863) {
    return term_863;
  }
  expandLiteralStringExpression(term_864) {
    return term_864;
  }
  expandLiteralRegExpExpression(term_865) {
    return term_865;
  }
}
