import {List} from "immutable";
import {expect, assert} from "./errors";
import {Maybe} from "ramda-fantasy";
export default class BindingMap {
  constructor() {
    this._map = new Map;
  }
  add(stx_17, {binding, phase, skipDup = false}) {
    let stxName_18 = stx_17.val();
    if (this._map.has(stxName_18)) {
      let scopesetBindingList = this._map.get(stxName_18);
      if (skipDup && scopesetBindingList.some(s_19 => s_19.scopes.equals(stx_17.context.scopeset))) {
        return;
      }
      this._map.set(stxName_18, scopesetBindingList.push({scopes: stx_17.context.scopeset, binding: binding, alias: Maybe.Nothing()}));
    } else {
      this._map.set(stxName_18, List.of({scopes: stx_17.context.scopeset, binding: binding, alias: Maybe.Nothing()}));
    }
  }
  addForward(stx_20, forwardStx_21, binding_22, phase_23 = 0) {
    let stxName_24 = stx_20.token.value;
    if (this._map.has(stxName_24)) {
      let scopesetBindingList = this._map.get(stxName_24);
      this._map.set(stxName_24, scopesetBindingList.push({scopes: stx_20.context.scopeset, binding: binding_22, alias: Maybe.of(forwardStx_21)}));
    } else {
      this._map.set(stxName_24, List.of({scopes: stx_20.context.scopeset, binding: binding_22, alias: Maybe.of(forwardStx_21)}));
    }
  }
  get(stx_25) {
    return this._map.get(stx_25.token.value);
  }
}
