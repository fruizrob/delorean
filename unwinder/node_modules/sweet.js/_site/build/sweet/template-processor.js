import {List} from "immutable";
import {Maybe} from "ramda-fantasy";
import _ from "ramda";
import Syntax from "./syntax";
import {assert} from "./errors";
const isDolar_694 = s_702 => s_702 && s_702 instanceof Syntax && s_702.isIdentifier() && s_702.val() === "$";
const isDelimiter_695 = s_703 => s_703 && typeof s_703.isDelimiter === "function" && s_703.isDelimiter();
const isBraces_696 = s_704 => s_704 && typeof s_704.isBraces === "function" && s_704.isBraces();
const isParens_697 = s_705 => s_705 && typeof s_705.isParens === "function" && s_705.isParens();
const isBrackets_698 = s_706 => s_706 && typeof s_706.isBrackets === "function" && s_706.isBrackets();
const insertIntoDelimiter_699 = _.cond([[isBraces_696, (s_707, r_708) => Syntax.fromBraces(r_708, s_707)], [isParens_697, (s_709, r_710) => Syntax.fromParens(r_710, s_709)], [isBrackets_698, (s_711, r_712) => Syntax.fromBrackets(r_712, s_711)]]);
const process_700 = (acc_713, s_714) => {
  if (isBraces_696(s_714) && isDolar_694(acc_713.template.last())) {
    return {template: acc_713.template.push(Syntax.fromBraces(List.of(Syntax.fromNumber(acc_713.interp.size)), s_714)), interp: acc_713.interp.push(s_714.inner())};
  } else if (isDelimiter_695(s_714)) {
    let innerResult = processTemplate(s_714.inner(), acc_713.interp);
    return {template: acc_713.template.push(insertIntoDelimiter_699(s_714, innerResult.template)), interp: innerResult.interp};
  } else {
    return {template: acc_713.template.push(s_714), interp: acc_713.interp};
  }
};
const replace_701 = (acc_715, s_716) => {
  if (isBraces_696(s_716) && isDolar_694(acc_715.template.last())) {
    let index = s_716.inner().first().val();
    assert(acc_715.rep.size > index, "unknown replacement value");
    return {template: acc_715.template.pop().concat(acc_715.rep.get(index)), rep: acc_715.rep};
  } else if (isDelimiter_695(s_716)) {
    let innerResult = replaceTemplate(s_716.inner(), acc_715.rep);
    return {template: acc_715.template.push(insertIntoDelimiter_699(s_716, innerResult)), rep: acc_715.rep};
  } else {
    return {template: acc_715.template.push(s_716), rep: acc_715.rep};
  }
};
export function processTemplate(temp_717, interp_718 = List()) {
  return temp_717.reduce(process_700, {template: List(), interp: interp_718});
}
export function replaceTemplate(temp_719, rep_720) {
  return temp_719.reduce(replace_701, {template: List(), rep: rep_720}).template;
}
