import {List} from "immutable";
import {assert} from "./errors";
import BindingMap from "./binding-map";
import {Maybe} from "ramda-fantasy";
import  * as _ from "ramda";
const Just_641 = Maybe.Just;
const Nothing_642 = Maybe.Nothing;
import {TokenType, TokenClass} from "shift-parser/dist/tokenizer";
function sizeDecending_643(a_644, b_645) {
  if (a_644.scopes.size > b_645.scopes.size) {
    return -1;
  } else if (b_645.scopes.size > a_644.scopes.size) {
    return 1;
  } else {
    return 0;
  }
}
export default class Syntax {
  constructor(token_646, context_647 = {bindings: new BindingMap, scopeset: List()}) {
    this.token = token_646;
    this.context = {bindings: context_647.bindings, scopeset: context_647.scopeset};
    Object.freeze(this.context);
    Object.freeze(this);
  }
  static of(token_648, stx_649 = {}) {
    return new Syntax(token_648, stx_649.context);
  }
  static fromNull(stx_650 = {}) {
    return new Syntax({type: TokenType.NULL, value: null}, stx_650.context);
  }
  static fromNumber(value_651, stx_652 = {}) {
    return new Syntax({type: TokenType.NUMBER, value: value_651}, stx_652.context);
  }
  static fromString(value_653, stx_654 = {}) {
    return new Syntax({type: TokenType.STRING, str: value_653}, stx_654.context);
  }
  static fromPunctuator(value_655, stx_656 = {}) {
    return new Syntax({type: {klass: TokenClass.Punctuator, name: value_655}, value: value_655}, stx_656.context);
  }
  static fromKeyword(value_657, stx_658 = {}) {
    return new Syntax({type: {klass: TokenClass.Keyword, name: value_657}, value: value_657}, stx_658.context);
  }
  static fromIdentifier(value_659, stx_660 = {}) {
    return new Syntax({type: TokenType.IDENTIFIER, value: value_659}, stx_660.context);
  }
  static fromRegularExpression(value_661, stx_662 = {}) {
    return new Syntax({type: TokenType.REGEXP, value: value_661}, stx_662.context);
  }
  static fromBraces(inner_663, stx_664 = {}) {
    let left_665 = new Syntax({type: TokenType.LBRACE, value: "{"});
    let right_666 = new Syntax({type: TokenType.RBRACE, value: "}"});
    return new Syntax(List.of(left_665).concat(inner_663).push(right_666), stx_664.context);
  }
  static fromBrackets(inner_667, stx_668 = {}) {
    let left_669 = new Syntax({type: TokenType.LBRACK, value: "["});
    let right_670 = new Syntax({type: TokenType.RBRACK, value: "]"});
    return new Syntax(List.of(left_669).concat(inner_667).push(right_670), stx_668.context);
  }
  static fromParens(inner_671, stx_672 = {}) {
    let left_673 = new Syntax({type: TokenType.LPAREN, value: "("});
    let right_674 = new Syntax({type: TokenType.RPAREN, value: ")"});
    return new Syntax(List.of(left_673).concat(inner_671).push(right_674), stx_672.context);
  }
  resolve() {
    if (this.context.scopeset.size === 0 || !(this.isIdentifier() || this.isKeyword())) {
      return this.token.value;
    }
    let scope_675 = this.context.scopeset.last();
    let stxScopes_676 = this.context.scopeset;
    let bindings_677 = this.context.bindings;
    if (scope_675) {
      let scopesetBindingList = bindings_677.get(this);
      if (scopesetBindingList) {
        let biggestBindingPair = scopesetBindingList.filter(({scopes, binding}) => {
          return scopes.isSubset(stxScopes_676);
        }).sort(sizeDecending_643);
        if (biggestBindingPair.size >= 2 && biggestBindingPair.get(0).scopes.size === biggestBindingPair.get(1).scopes.size) {
          let debugBase = "{" + stxScopes_676.map(s_678 => s_678.toString()).join(", ") + "}";
          let debugAmbigousScopesets = biggestBindingPair.map(({scopes}) => {
            return "{" + scopes.map(s_679 => s_679.toString()).join(", ") + "}";
          }).join(", ");
          throw new Error("Scopeset " + debugBase + " has ambiguous subsets " + debugAmbigousScopesets);
        } else if (biggestBindingPair.size !== 0) {
          let bindingStr = biggestBindingPair.get(0).binding.toString();
          if (Maybe.isJust(biggestBindingPair.get(0).alias)) {
            return biggestBindingPair.get(0).alias.getOrElse(null).resolve();
          }
          return bindingStr;
        }
      }
    }
    return this.token.value;
  }
  val() {
    assert(!this.isDelimiter(), "cannot get the val of a delimiter");
    if (this.isStringLiteral()) {
      return this.token.str;
    }
    if (this.isTemplate()) {
      return this.token.items.map(el_680 => {
        if (el_680 instanceof Syntax && el_680.isDelimiter()) {
          return "${...}";
        }
        return el_680.slice.text;
      }).join("");
    }
    return this.token.value;
  }
  lineNumber() {
    if (!this.isDelimiter()) {
      return this.token.slice.startLocation.line;
    } else {
      return this.token.get(0).lineNumber();
    }
  }
  inner() {
    assert(this.isDelimiter(), "can only get the inner of a delimiter");
    return this.token.slice(1, this.token.size - 1);
  }
  addScope(scope_681, bindings_682, options_683 = {flip: false}) {
    let token_684 = this.isDelimiter() ? this.token.map(s_686 => s_686.addScope(scope_681, bindings_682, options_683)) : this.token;
    if (this.isTemplate()) {
      token_684 = {type: this.token.type, items: token_684.items.map(it_687 => {
        if (it_687 instanceof Syntax && it_687.isDelimiter()) {
          return it_687.addScope(scope_681, bindings_682, options_683);
        }
        return it_687;
      })};
    }
    let newScopeset_685;
    if (options_683.flip) {
      let index = this.context.scopeset.indexOf(scope_681);
      if (index !== -1) {
        newScopeset_685 = this.context.scopeset.remove(index);
      } else {
        newScopeset_685 = this.context.scopeset.push(scope_681);
      }
    } else {
      newScopeset_685 = this.context.scopeset.push(scope_681);
    }
    return new Syntax(token_684, {bindings: bindings_682, scopeset: newScopeset_685});
  }
  removeScope(scope_688) {
    let token_689 = this.isDelimiter() ? this.token.map(s_692 => s_692.removeScope(scope_688)) : this.token;
    let newScopeset_690 = this.context.scopeset;
    let index_691 = this.context.scopeset.indexOf(scope_688);
    if (index_691 !== -1) {
      newScopeset_690 = this.context.scopeset.remove(index_691);
    }
    return new Syntax(token_689, {bindings: this.context.bindings, scopeset: newScopeset_690});
  }
  isIdentifier() {
    return !this.isDelimiter() && this.token.type.klass === TokenClass.Ident;
  }
  isAssign() {
    return !this.isDelimiter() && this.token.type === TokenType.ASSIGN;
  }
  isBooleanLiteral() {
    return !this.isDelimiter() && this.token.type === TokenType.TRUE || this.token.type === TokenType.FALSE;
  }
  isKeyword() {
    return !this.isDelimiter() && this.token.type.klass === TokenClass.Keyword;
  }
  isNullLiteral() {
    return !this.isDelimiter() && this.token.type === TokenType.NULL;
  }
  isNumericLiteral() {
    return !this.isDelimiter() && this.token.type.klass === TokenClass.NumericLiteral;
  }
  isPunctuator() {
    return !this.isDelimiter() && this.token.type.klass === TokenClass.Punctuator;
  }
  isStringLiteral() {
    return !this.isDelimiter() && this.token.type.klass === TokenClass.StringLiteral;
  }
  isRegularExpression() {
    return !this.isDelimiter() && this.token.type.klass === TokenClass.RegularExpression;
  }
  isTemplate() {
    return !this.isDelimiter() && this.token.type === TokenType.TEMPLATE;
  }
  isDelimiter() {
    return List.isList(this.token);
  }
  isParens() {
    return this.isDelimiter() && this.token.get(0).token.type === TokenType.LPAREN;
  }
  isBraces() {
    return this.isDelimiter() && this.token.get(0).token.type === TokenType.LBRACE;
  }
  isBrackets() {
    return this.isDelimiter() && this.token.get(0).token.type === TokenType.LBRACK;
  }
  isSyntaxTemplate() {
    return this.isDelimiter() && this.token.get(0).val() === "#`";
  }
  isEOF() {
    return !this.isDelimiter() && this.token.type === TokenType.EOS;
  }
  toString() {
    if (this.isDelimiter()) {
      return this.token.map(s_693 => s_693.toString()).join(" ");
    }
    if (this.isStringLiteral()) {
      return "'" + this.token.str;
    }
    if (this.isTemplate()) {
      return this.val();
    }
    return this.token.value;
  }
}
