import Reader from "./shift-reader";
import Expander from "./expander";
import {List} from "immutable";
import Syntax from "./syntax";
import Env from "./env";
import reduce from "shift-reducer";
import ParseReducer from "./parse-reducer";
import codegen, {FormattedCodeGen} from "shift-codegen";
import {Scope, freshScope} from "./scope";
import BindingMap from "./binding-map.js";
import Term from "./terms";
import {Modules} from "./modules";
export function expand(source_616, options_617 = {}) {
  let reader_618 = new Reader(source_616);
  let stxl_619 = reader_618.read();
  let scope_620 = freshScope("top");
  let bindings_621 = new BindingMap;
  let expander_622 = new Expander({env: new Env, store: new Env, bindings: bindings_621, cwd: options_617.cwd, modules: new Modules, currentScope: [scope_620], transform: options_617.transform ? options_617.transform : function (x_624) {
    return {code: x_624};
  }, moduleResolver: options_617.moduleResolver, moduleLoader: options_617.moduleLoader});
  let exStxl_623 = expander_622.expand(stxl_619.map(s_625 => s_625.addScope(scope_620, bindings_621)));
  return new Term("Module", {directives: List(), items: exStxl_623});
}
export function parse(source_626, options_627 = {}) {
  return reduce(new ParseReducer, expand(source_626, options_627));
}
export function compile(source_628, options_629 = {}) {
  let ast_630 = parse(source_628, options_629);
  let gen_631 = codegen(ast_630, new FormattedCodeGen);
  return options_629.transform && !options_629.noBabel ? options_629.transform(gen_631, {presets: ["es2015"]}) : {code: gen_631};
}
