import Term from "./terms";
import {FunctionDeclTransform, VariableDeclTransform, NewTransform, LetDeclTransform, ConstDeclTransform, SyntaxDeclTransform, SyntaxrecDeclTransform, SyntaxQuoteTransform, ReturnStatementTransform, WhileTransform, IfTransform, ForTransform, SwitchTransform, BreakTransform, ContinueTransform, DoTransform, DebuggerTransform, WithTransform, TryTransform, ThrowTransform, CompiletimeTransform} from "./transforms";
import {List} from "immutable";
import {expect, assert} from "./errors";
import {isOperator, isUnaryOperator, getOperatorAssoc, getOperatorPrec, operatorLt} from "./operators";
import Syntax from "./syntax";
import {freshScope} from "./scope";
import {sanitizeReplacementValues} from "./load-syntax";
import MacroContext from "./macro-context";
const EXPR_LOOP_OPERATOR_26 = {};
const EXPR_LOOP_NO_CHANGE_27 = {};
const EXPR_LOOP_EXPANSION_28 = {};
export class Enforester {
  constructor(stxl_29, prev_30, context_31) {
    this.done = false;
    assert(List.isList(stxl_29), "expecting a list of terms to enforest");
    assert(List.isList(prev_30), "expecting a list of terms to enforest");
    assert(context_31, "expecting a context to enforest");
    this.term = null;
    this.rest = stxl_29;
    this.prev = prev_30;
    this.context = context_31;
  }
  peek(n_32 = 0) {
    return this.rest.get(n_32);
  }
  advance() {
    let ret_33 = this.rest.first();
    this.rest = this.rest.rest();
    return ret_33;
  }
  enforest(type_34 = "Module") {
    this.term = null;
    if (this.rest.size === 0) {
      this.done = true;
      return this.term;
    }
    if (this.isEOF(this.peek())) {
      this.term = new Term("EOF", {});
      this.advance();
      return this.term;
    }
    let result_35;
    if (type_34 === "expression") {
      result_35 = this.enforestExpressionLoop();
    } else {
      result_35 = this.enforestModule();
    }
    if (this.rest.size === 0) {
      this.done = true;
    }
    return result_35;
  }
  enforestModule() {
    return this.enforestBody();
  }
  enforestBody() {
    return this.enforestModuleItem();
  }
  enforestModuleItem() {
    let lookahead_36 = this.peek();
    if (this.isKeyword(lookahead_36, "import")) {
      this.advance();
      return this.enforestImportDeclaration();
    } else if (this.isKeyword(lookahead_36, "export")) {
      this.advance();
      return this.enforestExportDeclaration();
    }
    return this.enforestStatement();
  }
  enforestExportDeclaration() {
    let lookahead_37 = this.peek();
    if (this.isPunctuator(lookahead_37, "*")) {
      this.advance();
      let moduleSpecifier = this.enforestFromClause();
      return new Term("ExportAllFrom", {moduleSpecifier: moduleSpecifier});
    } else if (this.isBraces(lookahead_37)) {
      let namedExports = this.enforestExportClause();
      let moduleSpecifier = null;
      if (this.isIdentifier(this.peek(), "from")) {
        moduleSpecifier = this.enforestFromClause();
      }
      return new Term("ExportFrom", {namedExports: namedExports, moduleSpecifier: moduleSpecifier});
    } else if (this.isKeyword(lookahead_37, "class")) {
      return new Term("Export", {declaration: this.enforestClass({isExpr: false})});
    } else if (this.isFnDeclTransform(lookahead_37)) {
      return new Term("Export", {declaration: this.enforestFunction({isExpr: false, inDefault: false})});
    } else if (this.isKeyword(lookahead_37, "default")) {
      this.advance();
      if (this.isFnDeclTransform(this.peek())) {
        return new Term("ExportDefault", {body: this.enforestFunction({isExpr: false, inDefault: true})});
      } else if (this.isKeyword(this.peek(), "class")) {
        return new Term("ExportDefault", {body: this.enforestClass({isExpr: false, inDefault: true})});
      } else {
        let body = this.enforestExpressionLoop();
        this.consumeSemicolon();
        return new Term("ExportDefault", {body: body});
      }
    } else if (this.isVarDeclTransform(lookahead_37) || this.isLetDeclTransform(lookahead_37) || this.isConstDeclTransform(lookahead_37) || this.isSyntaxrecDeclTransform(lookahead_37) || this.isSyntaxDeclTransform(lookahead_37)) {
      return new Term("Export", {declaration: this.enforestVariableDeclaration()});
    }
    throw this.createError(lookahead_37, "unexpected syntax");
  }
  enforestExportClause() {
    let enf_38 = new Enforester(this.matchCurlies(), List(), this.context);
    let result_39 = [];
    while (enf_38.rest.size !== 0) {
      result_39.push(enf_38.enforestExportSpecifier());
      enf_38.consumeComma();
    }
    return List(result_39);
  }
  enforestExportSpecifier() {
    let name_40 = this.enforestIdentifier();
    if (this.isIdentifier(this.peek(), "as")) {
      this.advance();
      let exportedName = this.enforestIdentifier();
      return new Term("ExportSpecifier", {name: name_40, exportedName: exportedName});
    }
    return new Term("ExportSpecifier", {name: null, exportedName: name_40});
  }
  enforestImportDeclaration() {
    let lookahead_41 = this.peek();
    let defaultBinding_42 = null;
    let namedImports_43 = List();
    let forSyntax_44 = false;
    if (this.isStringLiteral(lookahead_41)) {
      let moduleSpecifier = this.advance();
      this.consumeSemicolon();
      return new Term("Import", {defaultBinding: defaultBinding_42, namedImports: namedImports_43, moduleSpecifier: moduleSpecifier});
    }
    if (this.isIdentifier(lookahead_41) || this.isKeyword(lookahead_41)) {
      defaultBinding_42 = this.enforestBindingIdentifier();
      if (!this.isPunctuator(this.peek(), ",")) {
        let moduleSpecifier = this.enforestFromClause();
        if (this.isKeyword(this.peek(), "for") && this.isIdentifier(this.peek(1), "syntax")) {
          this.advance();
          this.advance();
          forSyntax_44 = true;
        }
        return new Term("Import", {defaultBinding: defaultBinding_42, moduleSpecifier: moduleSpecifier, namedImports: List(), forSyntax: forSyntax_44});
      }
    }
    this.consumeComma();
    lookahead_41 = this.peek();
    if (this.isBraces(lookahead_41)) {
      let imports = this.enforestNamedImports();
      let fromClause = this.enforestFromClause();
      if (this.isKeyword(this.peek(), "for") && this.isIdentifier(this.peek(1), "syntax")) {
        this.advance();
        this.advance();
        forSyntax_44 = true;
      }
      return new Term("Import", {defaultBinding: defaultBinding_42, forSyntax: forSyntax_44, namedImports: imports, moduleSpecifier: fromClause});
    } else if (this.isPunctuator(lookahead_41, "*")) {
      let namespaceBinding = this.enforestNamespaceBinding();
      let moduleSpecifier = this.enforestFromClause();
      if (this.isKeyword(this.peek(), "for") && this.isIdentifier(this.peek(1), "syntax")) {
        this.advance();
        this.advance();
        forSyntax_44 = true;
      }
      return new Term("ImportNamespace", {defaultBinding: defaultBinding_42, forSyntax: forSyntax_44, namespaceBinding: namespaceBinding, moduleSpecifier: moduleSpecifier});
    }
    throw this.createError(lookahead_41, "unexpected syntax");
  }
  enforestNamespaceBinding() {
    this.matchPunctuator("*");
    this.matchIdentifier("as");
    return this.enforestBindingIdentifier();
  }
  enforestNamedImports() {
    let enf_45 = new Enforester(this.matchCurlies(), List(), this.context);
    let result_46 = [];
    while (enf_45.rest.size !== 0) {
      result_46.push(enf_45.enforestImportSpecifiers());
      enf_45.consumeComma();
    }
    return List(result_46);
  }
  enforestImportSpecifiers() {
    let lookahead_47 = this.peek();
    let name_48;
    if (this.isIdentifier(lookahead_47) || this.isKeyword(lookahead_47)) {
      name_48 = this.advance();
      if (!this.isIdentifier(this.peek(), "as")) {
        return new Term("ImportSpecifier", {name: null, binding: new Term("BindingIdentifier", {name: name_48})});
      } else {
        this.matchIdentifier("as");
      }
    } else {
      throw this.createError(lookahead_47, "unexpected token in import specifier");
    }
    return new Term("ImportSpecifier", {name: name_48, binding: this.enforestBindingIdentifier()});
  }
  enforestFromClause() {
    this.matchIdentifier("from");
    let lookahead_49 = this.matchStringLiteral();
    this.consumeSemicolon();
    return lookahead_49;
  }
  enforestStatementListItem() {
    let lookahead_50 = this.peek();
    if (this.isFnDeclTransform(lookahead_50)) {
      return this.enforestFunctionDeclaration({isExpr: false});
    } else if (this.isKeyword(lookahead_50, "class")) {
      return this.enforestClass({isExpr: false});
    } else {
      return this.enforestStatement();
    }
  }
  enforestStatement() {
    let lookahead_51 = this.peek();
    if (this.term === null && this.isCompiletimeTransform(lookahead_51)) {
      this.rest = this.expandMacro().concat(this.rest);
      lookahead_51 = this.peek();
    }
    if (this.term === null && this.isBraces(lookahead_51)) {
      return this.enforestBlockStatement();
    }
    if (this.term === null && this.isWhileTransform(lookahead_51)) {
      return this.enforestWhileStatement();
    }
    if (this.term === null && this.isIfTransform(lookahead_51)) {
      return this.enforestIfStatement();
    }
    if (this.term === null && this.isForTransform(lookahead_51)) {
      return this.enforestForStatement();
    }
    if (this.term === null && this.isSwitchTransform(lookahead_51)) {
      return this.enforestSwitchStatement();
    }
    if (this.term === null && this.isBreakTransform(lookahead_51)) {
      return this.enforestBreakStatement();
    }
    if (this.term === null && this.isContinueTransform(lookahead_51)) {
      return this.enforestContinueStatement();
    }
    if (this.term === null && this.isDoTransform(lookahead_51)) {
      return this.enforestDoStatement();
    }
    if (this.term === null && this.isDebuggerTransform(lookahead_51)) {
      return this.enforestDebuggerStatement();
    }
    if (this.term === null && this.isWithTransform(lookahead_51)) {
      return this.enforestWithStatement();
    }
    if (this.term === null && this.isTryTransform(lookahead_51)) {
      return this.enforestTryStatement();
    }
    if (this.term === null && this.isThrowTransform(lookahead_51)) {
      return this.enforestThrowStatement();
    }
    if (this.term === null && this.isKeyword(lookahead_51, "class")) {
      return this.enforestClass({isExpr: false});
    }
    if (this.term === null && this.isFnDeclTransform(lookahead_51)) {
      return this.enforestFunctionDeclaration();
    }
    if (this.term === null && this.isIdentifier(lookahead_51) && this.isPunctuator(this.peek(1), ":")) {
      return this.enforestLabeledStatement();
    }
    if (this.term === null && (this.isVarDeclTransform(lookahead_51) || this.isLetDeclTransform(lookahead_51) || this.isConstDeclTransform(lookahead_51) || this.isSyntaxrecDeclTransform(lookahead_51) || this.isSyntaxDeclTransform(lookahead_51))) {
      let stmt = new Term("VariableDeclarationStatement", {declaration: this.enforestVariableDeclaration()});
      this.consumeSemicolon();
      return stmt;
    }
    if (this.term === null && this.isReturnStmtTransform(lookahead_51)) {
      return this.enforestReturnStatement();
    }
    if (this.term === null && this.isPunctuator(lookahead_51, ";")) {
      this.advance();
      return new Term("EmptyStatement", {});
    }
    return this.enforestExpressionStatement();
  }
  enforestLabeledStatement() {
    let label_52 = this.matchIdentifier();
    let punc_53 = this.matchPunctuator(":");
    let stmt_54 = this.enforestStatement();
    return new Term("LabeledStatement", {label: label_52, body: stmt_54});
  }
  enforestBreakStatement() {
    this.matchKeyword("break");
    let lookahead_55 = this.peek();
    let label_56 = null;
    if (this.rest.size === 0 || this.isPunctuator(lookahead_55, ";")) {
      this.consumeSemicolon();
      return new Term("BreakStatement", {label: label_56});
    }
    if (this.isIdentifier(lookahead_55) || this.isKeyword(lookahead_55, "yield") || this.isKeyword(lookahead_55, "let")) {
      label_56 = this.enforestIdentifier();
    }
    this.consumeSemicolon();
    return new Term("BreakStatement", {label: label_56});
  }
  enforestTryStatement() {
    this.matchKeyword("try");
    let body_57 = this.enforestBlock();
    if (this.isKeyword(this.peek(), "catch")) {
      let catchClause = this.enforestCatchClause();
      if (this.isKeyword(this.peek(), "finally")) {
        this.advance();
        let finalizer = this.enforestBlock();
        return new Term("TryFinallyStatement", {body: body_57, catchClause: catchClause, finalizer: finalizer});
      }
      return new Term("TryCatchStatement", {body: body_57, catchClause: catchClause});
    }
    if (this.isKeyword(this.peek(), "finally")) {
      this.advance();
      let finalizer = this.enforestBlock();
      return new Term("TryFinallyStatement", {body: body_57, catchClause: null, finalizer: finalizer});
    }
    throw this.createError(this.peek(), "try with no catch or finally");
  }
  enforestCatchClause() {
    this.matchKeyword("catch");
    let bindingParens_58 = this.matchParens();
    let enf_59 = new Enforester(bindingParens_58, List(), this.context);
    let binding_60 = enf_59.enforestBindingTarget();
    let body_61 = this.enforestBlock();
    return new Term("CatchClause", {binding: binding_60, body: body_61});
  }
  enforestThrowStatement() {
    this.matchKeyword("throw");
    let expression_62 = this.enforestExpression();
    this.consumeSemicolon();
    return new Term("ThrowStatement", {expression: expression_62});
  }
  enforestWithStatement() {
    this.matchKeyword("with");
    let objParens_63 = this.matchParens();
    let enf_64 = new Enforester(objParens_63, List(), this.context);
    let object_65 = enf_64.enforestExpression();
    let body_66 = this.enforestStatement();
    return new Term("WithStatement", {object: object_65, body: body_66});
  }
  enforestDebuggerStatement() {
    this.matchKeyword("debugger");
    return new Term("DebuggerStatement", {});
  }
  enforestDoStatement() {
    this.matchKeyword("do");
    let body_67 = this.enforestStatement();
    this.matchKeyword("while");
    let testBody_68 = this.matchParens();
    let enf_69 = new Enforester(testBody_68, List(), this.context);
    let test_70 = enf_69.enforestExpression();
    this.consumeSemicolon();
    return new Term("DoWhileStatement", {body: body_67, test: test_70});
  }
  enforestContinueStatement() {
    let kwd_71 = this.matchKeyword("continue");
    let lookahead_72 = this.peek();
    let label_73 = null;
    if (this.rest.size === 0 || this.isPunctuator(lookahead_72, ";")) {
      this.consumeSemicolon();
      return new Term("ContinueStatement", {label: label_73});
    }
    if (this.lineNumberEq(kwd_71, lookahead_72) && (this.isIdentifier(lookahead_72) || this.isKeyword(lookahead_72, "yield") || this.isKeyword(lookahead_72, "let"))) {
      label_73 = this.enforestIdentifier();
    }
    this.consumeSemicolon();
    return new Term("ContinueStatement", {label: label_73});
  }
  enforestSwitchStatement() {
    this.matchKeyword("switch");
    let cond_74 = this.matchParens();
    let enf_75 = new Enforester(cond_74, List(), this.context);
    let discriminant_76 = enf_75.enforestExpression();
    let body_77 = this.matchCurlies();
    if (body_77.size === 0) {
      return new Term("SwitchStatement", {discriminant: discriminant_76, cases: List()});
    }
    enf_75 = new Enforester(body_77, List(), this.context);
    let cases_78 = enf_75.enforestSwitchCases();
    let lookahead_79 = enf_75.peek();
    if (enf_75.isKeyword(lookahead_79, "default")) {
      let defaultCase = enf_75.enforestSwitchDefault();
      let postDefaultCases = enf_75.enforestSwitchCases();
      return new Term("SwitchStatementWithDefault", {discriminant: discriminant_76, preDefaultCases: cases_78, defaultCase: defaultCase, postDefaultCases: postDefaultCases});
    }
    return new Term("SwitchStatement", {discriminant: discriminant_76, cases: cases_78});
  }
  enforestSwitchCases() {
    let cases_80 = [];
    while (!(this.rest.size === 0 || this.isKeyword(this.peek(), "default"))) {
      cases_80.push(this.enforestSwitchCase());
    }
    return List(cases_80);
  }
  enforestSwitchCase() {
    this.matchKeyword("case");
    return new Term("SwitchCase", {test: this.enforestExpression(), consequent: this.enforestSwitchCaseBody()});
  }
  enforestSwitchCaseBody() {
    this.matchPunctuator(":");
    return this.enforestStatementListInSwitchCaseBody();
  }
  enforestStatementListInSwitchCaseBody() {
    let result_81 = [];
    while (!(this.rest.size === 0 || this.isKeyword(this.peek(), "default") || this.isKeyword(this.peek(), "case"))) {
      result_81.push(this.enforestStatementListItem());
    }
    return List(result_81);
  }
  enforestSwitchDefault() {
    this.matchKeyword("default");
    return new Term("SwitchDefault", {consequent: this.enforestSwitchCaseBody()});
  }
  enforestForStatement() {
    this.matchKeyword("for");
    let cond_82 = this.matchParens();
    let enf_83 = new Enforester(cond_82, List(), this.context);
    let lookahead_84, test_85, init_86, right_87, type_88, left_89, update_90;
    if (enf_83.isPunctuator(enf_83.peek(), ";")) {
      enf_83.advance();
      if (!enf_83.isPunctuator(enf_83.peek(), ";")) {
        test_85 = enf_83.enforestExpression();
      }
      enf_83.matchPunctuator(";");
      if (enf_83.rest.size !== 0) {
        right_87 = enf_83.enforestExpression();
      }
      return new Term("ForStatement", {init: null, test: test_85, update: right_87, body: this.enforestStatement()});
    } else {
      lookahead_84 = enf_83.peek();
      if (enf_83.isVarDeclTransform(lookahead_84) || enf_83.isLetDeclTransform(lookahead_84) || enf_83.isConstDeclTransform(lookahead_84)) {
        init_86 = enf_83.enforestVariableDeclaration();
        lookahead_84 = enf_83.peek();
        if (this.isKeyword(lookahead_84, "in") || this.isIdentifier(lookahead_84, "of")) {
          if (this.isKeyword(lookahead_84, "in")) {
            enf_83.advance();
            right_87 = enf_83.enforestExpression();
            type_88 = "ForInStatement";
          } else if (this.isIdentifier(lookahead_84, "of")) {
            enf_83.advance();
            right_87 = enf_83.enforestExpression();
            type_88 = "ForOfStatement";
          }
          return new Term(type_88, {left: init_86, right: right_87, body: this.enforestStatement()});
        }
        enf_83.matchPunctuator(";");
        if (enf_83.isPunctuator(enf_83.peek(), ";")) {
          enf_83.advance();
          test_85 = null;
        } else {
          test_85 = enf_83.enforestExpression();
          enf_83.matchPunctuator(";");
        }
        update_90 = enf_83.enforestExpression();
      } else {
        if (this.isKeyword(enf_83.peek(1), "in") || this.isIdentifier(enf_83.peek(1), "of")) {
          left_89 = enf_83.enforestBindingIdentifier();
          let kind = enf_83.advance();
          if (this.isKeyword(kind, "in")) {
            type_88 = "ForInStatement";
          } else {
            type_88 = "ForOfStatement";
          }
          right_87 = enf_83.enforestExpression();
          return new Term(type_88, {left: left_89, right: right_87, body: this.enforestStatement()});
        }
        init_86 = enf_83.enforestExpression();
        enf_83.matchPunctuator(";");
        if (enf_83.isPunctuator(enf_83.peek(), ";")) {
          enf_83.advance();
          test_85 = null;
        } else {
          test_85 = enf_83.enforestExpression();
          enf_83.matchPunctuator(";");
        }
        update_90 = enf_83.enforestExpression();
      }
      return new Term("ForStatement", {init: init_86, test: test_85, update: update_90, body: this.enforestStatement()});
    }
  }
  enforestIfStatement() {
    this.matchKeyword("if");
    let cond_91 = this.matchParens();
    let enf_92 = new Enforester(cond_91, List(), this.context);
    let lookahead_93 = enf_92.peek();
    let test_94 = enf_92.enforestExpression();
    if (test_94 === null) {
      throw enf_92.createError(lookahead_93, "expecting an expression");
    }
    let consequent_95 = this.enforestStatement();
    let alternate_96 = null;
    if (this.isKeyword(this.peek(), "else")) {
      this.advance();
      alternate_96 = this.enforestStatement();
    }
    return new Term("IfStatement", {test: test_94, consequent: consequent_95, alternate: alternate_96});
  }
  enforestWhileStatement() {
    this.matchKeyword("while");
    let cond_97 = this.matchParens();
    let enf_98 = new Enforester(cond_97, List(), this.context);
    let lookahead_99 = enf_98.peek();
    let test_100 = enf_98.enforestExpression();
    if (test_100 === null) {
      throw enf_98.createError(lookahead_99, "expecting an expression");
    }
    let body_101 = this.enforestStatement();
    return new Term("WhileStatement", {test: test_100, body: body_101});
  }
  enforestBlockStatement() {
    return new Term("BlockStatement", {block: this.enforestBlock()});
  }
  enforestBlock() {
    let b_102 = this.matchCurlies();
    let body_103 = [];
    let enf_104 = new Enforester(b_102, List(), this.context);
    while (enf_104.rest.size !== 0) {
      let lookahead = enf_104.peek();
      let stmt = enf_104.enforestStatement();
      if (stmt == null) {
        throw enf_104.createError(lookahead, "not a statement");
      }
      body_103.push(stmt);
    }
    return new Term("Block", {statements: List(body_103)});
  }
  enforestClass({isExpr, inDefault}) {
    let kw_105 = this.advance();
    let name_106 = null, supr_107 = null;
    let type_108 = isExpr ? "ClassExpression" : "ClassDeclaration";
    if (this.isIdentifier(this.peek())) {
      name_106 = this.enforestBindingIdentifier();
    } else if (!isExpr) {
      if (inDefault) {
        name_106 = new Term("BindingIdentifier", {name: Syntax.fromIdentifier("_default", kw_105)});
      } else {
        throw this.createError(this.peek(), "unexpected syntax");
      }
    }
    if (this.isKeyword(this.peek(), "extends")) {
      this.advance();
      supr_107 = this.enforestExpressionLoop();
    }
    let elements_109 = [];
    let enf_110 = new Enforester(this.matchCurlies(), List(), this.context);
    while (enf_110.rest.size !== 0) {
      if (enf_110.isPunctuator(enf_110.peek(), ";")) {
        enf_110.advance();
        continue;
      }
      let isStatic = false;
      let {methodOrKey, kind} = enf_110.enforestMethodDefinition();
      if (kind === "identifier" && methodOrKey.value.val() === "static") {
        isStatic = true;
        ({methodOrKey, kind} = enf_110.enforestMethodDefinition());
      }
      if (kind === "method") {
        elements_109.push(new Term("ClassElement", {isStatic: isStatic, method: methodOrKey}));
      } else {
        throw this.createError(enf_110.peek(), "Only methods are allowed in classes");
      }
    }
    return new Term(type_108, {name: name_106, super: supr_107, elements: List(elements_109)});
  }
  enforestBindingTarget() {
    let lookahead_111 = this.peek();
    if (this.isIdentifier(lookahead_111) || this.isKeyword(lookahead_111)) {
      return this.enforestBindingIdentifier();
    } else if (this.isBrackets(lookahead_111)) {
      return this.enforestArrayBinding();
    } else if (this.isBraces(lookahead_111)) {
      return this.enforestObjectBinding();
    }
    assert(false, "not implemented yet");
  }
  enforestObjectBinding() {
    let enf_112 = new Enforester(this.matchCurlies(), List(), this.context);
    let properties_113 = [];
    while (enf_112.rest.size !== 0) {
      properties_113.push(enf_112.enforestBindingProperty());
      enf_112.consumeComma();
    }
    return new Term("ObjectBinding", {properties: List(properties_113)});
  }
  enforestBindingProperty() {
    let lookahead_114 = this.peek();
    let {name, binding} = this.enforestPropertyName();
    if (this.isIdentifier(lookahead_114) || this.isKeyword(lookahead_114, "let") || this.isKeyword(lookahead_114, "yield")) {
      if (!this.isPunctuator(this.peek(), ":")) {
        let defaultValue = null;
        if (this.isAssign(this.peek())) {
          this.advance();
          let expr = this.enforestExpressionLoop();
          defaultValue = expr;
        }
        return new Term("BindingPropertyIdentifier", {binding: binding, init: defaultValue});
      }
    }
    this.matchPunctuator(":");
    binding = this.enforestBindingElement();
    return new Term("BindingPropertyProperty", {name: name, binding: binding});
  }
  enforestArrayBinding() {
    let bracket_115 = this.matchSquares();
    let enf_116 = new Enforester(bracket_115, List(), this.context);
    let elements_117 = [], restElement_118 = null;
    while (enf_116.rest.size !== 0) {
      let el;
      if (enf_116.isPunctuator(enf_116.peek(), ",")) {
        enf_116.consumeComma();
        el = null;
      } else {
        if (enf_116.isPunctuator(enf_116.peek(), "...")) {
          enf_116.advance();
          restElement_118 = enf_116.enforestBindingTarget();
          break;
        } else {
          el = enf_116.enforestBindingElement();
        }
        enf_116.consumeComma();
      }
      elements_117.push(el);
    }
    return new Term("ArrayBinding", {elements: List(elements_117), restElement: restElement_118});
  }
  enforestBindingElement() {
    let binding_119 = this.enforestBindingTarget();
    if (this.isAssign(this.peek())) {
      this.advance();
      let init = this.enforestExpressionLoop();
      binding_119 = new Term("BindingWithDefault", {binding: binding_119, init: init});
    }
    return binding_119;
  }
  enforestBindingIdentifier() {
    return new Term("BindingIdentifier", {name: this.enforestIdentifier()});
  }
  enforestIdentifier() {
    let lookahead_120 = this.peek();
    if (this.isIdentifier(lookahead_120) || this.isKeyword(lookahead_120)) {
      return this.advance();
    }
    throw this.createError(lookahead_120, "expecting an identifier");
  }
  enforestReturnStatement() {
    let kw_121 = this.advance();
    let lookahead_122 = this.peek();
    if (this.rest.size === 0 || lookahead_122 && !this.lineNumberEq(kw_121, lookahead_122)) {
      return new Term("ReturnStatement", {expression: null});
    }
    let term_123 = null;
    if (!this.isPunctuator(lookahead_122, ";")) {
      term_123 = this.enforestExpression();
      expect(term_123 != null, "Expecting an expression to follow return keyword", lookahead_122, this.rest);
    }
    this.consumeSemicolon();
    return new Term("ReturnStatement", {expression: term_123});
  }
  enforestVariableDeclaration() {
    let kind_124;
    let lookahead_125 = this.advance();
    let kindSyn_126 = lookahead_125;
    if (kindSyn_126 && this.context.env.get(kindSyn_126.resolve()) === VariableDeclTransform) {
      kind_124 = "var";
    } else if (kindSyn_126 && this.context.env.get(kindSyn_126.resolve()) === LetDeclTransform) {
      kind_124 = "let";
    } else if (kindSyn_126 && this.context.env.get(kindSyn_126.resolve()) === ConstDeclTransform) {
      kind_124 = "const";
    } else if (kindSyn_126 && this.context.env.get(kindSyn_126.resolve()) === SyntaxDeclTransform) {
      kind_124 = "syntax";
    } else if (kindSyn_126 && this.context.env.get(kindSyn_126.resolve()) === SyntaxrecDeclTransform) {
      kind_124 = "syntaxrec";
    }
    let decls_127 = List();
    while (true) {
      let term = this.enforestVariableDeclarator();
      let lookahead_125 = this.peek();
      decls_127 = decls_127.concat(term);
      if (this.isPunctuator(lookahead_125, ",")) {
        this.advance();
      } else {
        break;
      }
    }
    return new Term("VariableDeclaration", {kind: kind_124, declarators: decls_127});
  }
  enforestVariableDeclarator() {
    let id_128 = this.enforestBindingTarget();
    let lookahead_129 = this.peek();
    let init_130, rest_131;
    if (this.isPunctuator(lookahead_129, "=")) {
      this.advance();
      let enf = new Enforester(this.rest, List(), this.context);
      init_130 = enf.enforest("expression");
      this.rest = enf.rest;
    } else {
      init_130 = null;
    }
    return new Term("VariableDeclarator", {binding: id_128, init: init_130});
  }
  enforestExpressionStatement() {
    let start_132 = this.rest.get(0);
    let expr_133 = this.enforestExpression();
    if (expr_133 === null) {
      throw this.createError(start_132, "not a valid expression");
    }
    this.consumeSemicolon();
    return new Term("ExpressionStatement", {expression: expr_133});
  }
  enforestExpression() {
    let left_134 = this.enforestExpressionLoop();
    let lookahead_135 = this.peek();
    if (this.isPunctuator(lookahead_135, ",")) {
      while (this.rest.size !== 0) {
        if (!this.isPunctuator(this.peek(), ",")) {
          break;
        }
        let operator = this.advance();
        let right = this.enforestExpressionLoop();
        left_134 = new Term("BinaryExpression", {left: left_134, operator: operator, right: right});
      }
    }
    this.term = null;
    return left_134;
  }
  enforestExpressionLoop() {
    this.term = null;
    this.opCtx = {prec: 0, combine: x_136 => x_136, stack: List()};
    do {
      let term = this.enforestAssignmentExpression();
      if (term === EXPR_LOOP_NO_CHANGE_27 && this.opCtx.stack.size > 0) {
        this.term = this.opCtx.combine(this.term);
        let {prec, combine} = this.opCtx.stack.last();
        this.opCtx.prec = prec;
        this.opCtx.combine = combine;
        this.opCtx.stack = this.opCtx.stack.pop();
      } else if (term === EXPR_LOOP_NO_CHANGE_27) {
        break;
      } else if (term === EXPR_LOOP_OPERATOR_26 || term === EXPR_LOOP_EXPANSION_28) {
        this.term = null;
      } else {
        this.term = term;
      }
    } while (true);
    return this.term;
  }
  enforestAssignmentExpression() {
    let lookahead_137 = this.peek();
    if (this.term === null && this.isTerm(lookahead_137)) {
      return this.advance();
    }
    if (this.term === null && this.isCompiletimeTransform(lookahead_137)) {
      let result = this.expandMacro();
      this.rest = result.concat(this.rest);
      return EXPR_LOOP_EXPANSION_28;
    }
    if (this.term === null && this.isKeyword(lookahead_137, "yield")) {
      return this.enforestYieldExpression();
    }
    if (this.term === null && this.isKeyword(lookahead_137, "class")) {
      return this.enforestClass({isExpr: true});
    }
    if (this.term === null && this.isKeyword(lookahead_137, "super")) {
      this.advance();
      return new Term("Super", {});
    }
    if (this.term === null && (this.isIdentifier(lookahead_137) || this.isParens(lookahead_137)) && this.isPunctuator(this.peek(1), "=>") && this.lineNumberEq(lookahead_137, this.peek(1))) {
      return this.enforestArrowExpression();
    }
    if (this.term === null && this.isSyntaxTemplate(lookahead_137)) {
      return this.enforestSyntaxTemplate();
    }
    if (this.term === null && this.isSyntaxQuoteTransform(lookahead_137)) {
      return this.enforestSyntaxQuote();
    }
    if (this.term === null && this.isNewTransform(lookahead_137)) {
      return this.enforestNewExpression();
    }
    if (this.term === null && this.isKeyword(lookahead_137, "this")) {
      return new Term("ThisExpression", {stx: this.advance()});
    }
    if (this.term === null && (this.isIdentifier(lookahead_137) || this.isKeyword(lookahead_137, "let") || this.isKeyword(lookahead_137, "yield"))) {
      return new Term("IdentifierExpression", {name: this.advance()});
    }
    if (this.term === null && this.isNumericLiteral(lookahead_137)) {
      let num = this.advance();
      if (num.val() === 1 / 0) {
        return new Term("LiteralInfinityExpression", {});
      }
      return new Term("LiteralNumericExpression", {value: num});
    }
    if (this.term === null && this.isStringLiteral(lookahead_137)) {
      return new Term("LiteralStringExpression", {value: this.advance()});
    }
    if (this.term === null && this.isTemplate(lookahead_137)) {
      return new Term("TemplateExpression", {tag: null, elements: this.enforestTemplateElements()});
    }
    if (this.term === null && this.isBooleanLiteral(lookahead_137)) {
      return new Term("LiteralBooleanExpression", {value: this.advance()});
    }
    if (this.term === null && this.isNullLiteral(lookahead_137)) {
      this.advance();
      return new Term("LiteralNullExpression", {});
    }
    if (this.term === null && this.isRegularExpression(lookahead_137)) {
      let reStx = this.advance();
      let lastSlash = reStx.token.value.lastIndexOf("/");
      let pattern = reStx.token.value.slice(1, lastSlash);
      let flags = reStx.token.value.slice(lastSlash + 1);
      return new Term("LiteralRegExpExpression", {pattern: pattern, flags: flags});
    }
    if (this.term === null && this.isParens(lookahead_137)) {
      return new Term("ParenthesizedExpression", {inner: this.advance().inner()});
    }
    if (this.term === null && this.isFnDeclTransform(lookahead_137)) {
      return this.enforestFunctionExpression();
    }
    if (this.term === null && this.isBraces(lookahead_137)) {
      return this.enforestObjectExpression();
    }
    if (this.term === null && this.isBrackets(lookahead_137)) {
      return this.enforestArrayExpression();
    }
    if (this.term === null && this.isOperator(lookahead_137)) {
      return this.enforestUnaryExpression();
    }
    if (this.term && this.isUpdateOperator(lookahead_137)) {
      return this.enforestUpdateExpression();
    }
    if (this.term && this.isOperator(lookahead_137)) {
      return this.enforestBinaryExpression();
    }
    if (this.term && this.isPunctuator(lookahead_137, ".") && (this.isIdentifier(this.peek(1)) || this.isKeyword(this.peek(1)))) {
      return this.enforestStaticMemberExpression();
    }
    if (this.term && this.isBrackets(lookahead_137)) {
      return this.enforestComputedMemberExpression();
    }
    if (this.term && this.isParens(lookahead_137)) {
      let paren = this.advance();
      return new Term("CallExpression", {callee: this.term, arguments: paren.inner()});
    }
    if (this.term && this.isTemplate(lookahead_137)) {
      return new Term("TemplateExpression", {tag: this.term, elements: this.enforestTemplateElements()});
    }
    if (this.term && this.isAssign(lookahead_137)) {
      let binding = this.transformDestructuring(this.term);
      let op = this.advance();
      let enf = new Enforester(this.rest, List(), this.context);
      let init = enf.enforest("expression");
      this.rest = enf.rest;
      if (op.val() === "=") {
        return new Term("AssignmentExpression", {binding: binding, expression: init});
      } else {
        return new Term("CompoundAssignmentExpression", {binding: binding, operator: op.val(), expression: init});
      }
    }
    if (this.term && this.isPunctuator(lookahead_137, "?")) {
      return this.enforestConditionalExpression();
    }
    return EXPR_LOOP_NO_CHANGE_27;
  }
  enforestArgumentList() {
    let result_138 = [];
    while (this.rest.size > 0) {
      let arg;
      if (this.isPunctuator(this.peek(), "...")) {
        this.advance();
        arg = new Term("SpreadElement", {expression: this.enforestExpressionLoop()});
      } else {
        arg = this.enforestExpressionLoop();
      }
      if (this.rest.size > 0) {
        this.matchPunctuator(",");
      }
      result_138.push(arg);
    }
    return List(result_138);
  }
  enforestNewExpression() {
    this.matchKeyword("new");
    let callee_139;
    if (this.isKeyword(this.peek(), "new")) {
      callee_139 = this.enforestNewExpression();
    } else if (this.isKeyword(this.peek(), "super")) {
      callee_139 = this.enforestExpressionLoop();
    } else if (this.isPunctuator(this.peek(), ".") && this.isIdentifier(this.peek(1), "target")) {
      this.advance();
      this.advance();
      return new Term("NewTargetExpression", {});
    } else {
      callee_139 = new Term("IdentifierExpression", {name: this.enforestIdentifier()});
    }
    let args_140;
    if (this.isParens(this.peek())) {
      args_140 = this.matchParens();
    } else {
      args_140 = List();
    }
    return new Term("NewExpression", {callee: callee_139, arguments: args_140});
  }
  enforestComputedMemberExpression() {
    let enf_141 = new Enforester(this.matchSquares(), List(), this.context);
    return new Term("ComputedMemberExpression", {object: this.term, expression: enf_141.enforestExpression()});
  }
  transformDestructuring(term_142) {
    switch (term_142.type) {
      case "IdentifierExpression":
        return new Term("BindingIdentifier", {name: term_142.name});
      case "ParenthesizedExpression":
        if (term_142.inner.size === 1 && this.isIdentifier(term_142.inner.get(0))) {
          return new Term("BindingIdentifier", {name: term_142.inner.get(0)});
        }
      case "DataProperty":
        return new Term("BindingPropertyProperty", {name: term_142.name, binding: this.transformDestructuringWithDefault(term_142.expression)});
      case "ShorthandProperty":
        return new Term("BindingPropertyIdentifier", {binding: new Term("BindingIdentifier", {name: term_142.name}), init: null});
      case "ObjectExpression":
        return new Term("ObjectBinding", {properties: term_142.properties.map(t_143 => this.transformDestructuring(t_143))});
      case "ArrayExpression":
        let last = term_142.elements.last();
        if (last != null && last.type === "SpreadElement") {
          return new Term("ArrayBinding", {elements: term_142.elements.slice(0, -1).map(t_144 => t_144 && this.transformDestructuringWithDefault(t_144)), restElement: this.transformDestructuringWithDefault(last.expression)});
        } else {
          return new Term("ArrayBinding", {elements: term_142.elements.map(t_145 => t_145 && this.transformDestructuringWithDefault(t_145)), restElement: null});
        }
        return new Term("ArrayBinding", {elements: term_142.elements.map(t_146 => t_146 && this.transformDestructuring(t_146)), restElement: null});
      case "StaticPropertyName":
        return new Term("BindingIdentifier", {name: term_142.value});
      case "ComputedMemberExpression":
      case "StaticMemberExpression":
      case "ArrayBinding":
      case "BindingIdentifier":
      case "BindingPropertyIdentifier":
      case "BindingPropertyProperty":
      case "BindingWithDefault":
      case "ObjectBinding":
        return term_142;
    }
    assert(false, "not implemented yet for " + term_142.type);
  }
  transformDestructuringWithDefault(term_147) {
    switch (term_147.type) {
      case "AssignmentExpression":
        return new Term("BindingWithDefault", {binding: this.transformDestructuring(term_147.binding), init: term_147.expression});
    }
    return this.transformDestructuring(term_147);
  }
  enforestArrowExpression() {
    let enf_148;
    if (this.isIdentifier(this.peek())) {
      enf_148 = new Enforester(List.of(this.advance()), List(), this.context);
    } else {
      let p = this.matchParens();
      enf_148 = new Enforester(p, List(), this.context);
    }
    let params_149 = enf_148.enforestFormalParameters();
    this.matchPunctuator("=>");
    let body_150;
    if (this.isBraces(this.peek())) {
      body_150 = this.matchCurlies();
    } else {
      enf_148 = new Enforester(this.rest, List(), this.context);
      body_150 = enf_148.enforestExpressionLoop();
      this.rest = enf_148.rest;
    }
    return new Term("ArrowExpression", {params: params_149, body: body_150});
  }
  enforestYieldExpression() {
    let kwd_151 = this.matchKeyword("yield");
    let lookahead_152 = this.peek();
    if (this.rest.size === 0 || lookahead_152 && !this.lineNumberEq(kwd_151, lookahead_152)) {
      return new Term("YieldExpression", {expression: null});
    } else {
      let isGenerator = false;
      if (this.isPunctuator(this.peek(), "*")) {
        isGenerator = true;
        this.advance();
      }
      let expr = this.enforestExpression();
      let type = isGenerator ? "YieldGeneratorExpression" : "YieldExpression";
      return new Term(type, {expression: expr});
    }
  }
  enforestSyntaxTemplate() {
    return new Term("SyntaxTemplate", {template: this.advance()});
  }
  enforestSyntaxQuote() {
    let name_153 = this.advance();
    return new Term("SyntaxQuote", {name: name_153, template: new Term("TemplateExpression", {tag: new Term("IdentifierExpression", {name: name_153}), elements: this.enforestTemplateElements()})});
  }
  enforestStaticMemberExpression() {
    let object_154 = this.term;
    let dot_155 = this.advance();
    let property_156 = this.advance();
    return new Term("StaticMemberExpression", {object: object_154, property: property_156});
  }
  enforestArrayExpression() {
    let arr_157 = this.advance();
    let elements_158 = [];
    let enf_159 = new Enforester(arr_157.inner(), List(), this.context);
    while (enf_159.rest.size > 0) {
      let lookahead = enf_159.peek();
      if (enf_159.isPunctuator(lookahead, ",")) {
        enf_159.advance();
        elements_158.push(null);
      } else if (enf_159.isPunctuator(lookahead, "...")) {
        enf_159.advance();
        let expression = enf_159.enforestExpressionLoop();
        if (expression == null) {
          throw enf_159.createError(lookahead, "expecting expression");
        }
        elements_158.push(new Term("SpreadElement", {expression: expression}));
      } else {
        let term = enf_159.enforestExpressionLoop();
        if (term == null) {
          throw enf_159.createError(lookahead, "expected expression");
        }
        elements_158.push(term);
        enf_159.consumeComma();
      }
    }
    return new Term("ArrayExpression", {elements: List(elements_158)});
  }
  enforestObjectExpression() {
    let obj_160 = this.advance();
    let properties_161 = List();
    let enf_162 = new Enforester(obj_160.inner(), List(), this.context);
    let lastProp_163 = null;
    while (enf_162.rest.size > 0) {
      let prop = enf_162.enforestPropertyDefinition();
      enf_162.consumeComma();
      properties_161 = properties_161.concat(prop);
      if (lastProp_163 === prop) {
        throw enf_162.createError(prop, "invalid syntax in object");
      }
      lastProp_163 = prop;
    }
    return new Term("ObjectExpression", {properties: properties_161});
  }
  enforestPropertyDefinition() {
    let {methodOrKey, kind} = this.enforestMethodDefinition();
    switch (kind) {
      case "method":
        return methodOrKey;
      case "identifier":
        if (this.isAssign(this.peek())) {
          this.advance();
          let init = this.enforestExpressionLoop();
          return new Term("BindingPropertyIdentifier", {init: init, binding: this.transformDestructuring(methodOrKey)});
        } else if (!this.isPunctuator(this.peek(), ":")) {
          return new Term("ShorthandProperty", {name: methodOrKey.value});
        }
    }
    this.matchPunctuator(":");
    let expr_164 = this.enforestExpressionLoop();
    return new Term("DataProperty", {name: methodOrKey, expression: expr_164});
  }
  enforestMethodDefinition() {
    let lookahead_165 = this.peek();
    let isGenerator_166 = false;
    if (this.isPunctuator(lookahead_165, "*")) {
      isGenerator_166 = true;
      this.advance();
    }
    if (this.isIdentifier(lookahead_165, "get") && this.isPropertyName(this.peek(1))) {
      this.advance();
      let {name} = this.enforestPropertyName();
      this.matchParens();
      let body = this.matchCurlies();
      return {methodOrKey: new Term("Getter", {name: name, body: body}), kind: "method"};
    } else if (this.isIdentifier(lookahead_165, "set") && this.isPropertyName(this.peek(1))) {
      this.advance();
      let {name} = this.enforestPropertyName();
      let enf = new Enforester(this.matchParens(), List(), this.context);
      let param = enf.enforestBindingElement();
      let body = this.matchCurlies();
      return {methodOrKey: new Term("Setter", {name: name, param: param, body: body}), kind: "method"};
    }
    let {name} = this.enforestPropertyName();
    if (this.isParens(this.peek())) {
      let params = this.matchParens();
      let enf = new Enforester(params, List(), this.context);
      let formalParams = enf.enforestFormalParameters();
      let body = this.matchCurlies();
      return {methodOrKey: new Term("Method", {isGenerator: isGenerator_166, name: name, params: formalParams, body: body}), kind: "method"};
    }
    return {methodOrKey: name, kind: this.isIdentifier(lookahead_165) || this.isKeyword(lookahead_165) ? "identifier" : "property"};
  }
  enforestPropertyName() {
    let lookahead_167 = this.peek();
    if (this.isStringLiteral(lookahead_167) || this.isNumericLiteral(lookahead_167)) {
      return {name: new Term("StaticPropertyName", {value: this.advance()}), binding: null};
    } else if (this.isBrackets(lookahead_167)) {
      let enf = new Enforester(this.matchSquares(), List(), this.context);
      let expr = enf.enforestExpressionLoop();
      return {name: new Term("ComputedPropertyName", {expression: expr}), binding: null};
    }
    let name_168 = this.advance();
    return {name: new Term("StaticPropertyName", {value: name_168}), binding: new Term("BindingIdentifier", {name: name_168})};
  }
  enforestFunction({isExpr, inDefault, allowGenerator}) {
    let name_169 = null, params_170, body_171, rest_172;
    let isGenerator_173 = false;
    let fnKeyword_174 = this.advance();
    let lookahead_175 = this.peek();
    let type_176 = isExpr ? "FunctionExpression" : "FunctionDeclaration";
    if (this.isPunctuator(lookahead_175, "*")) {
      isGenerator_173 = true;
      this.advance();
      lookahead_175 = this.peek();
    }
    if (!this.isParens(lookahead_175)) {
      name_169 = this.enforestBindingIdentifier();
    } else if (inDefault) {
      name_169 = new Term("BindingIdentifier", {name: Syntax.fromIdentifier("*default*", fnKeyword_174)});
    }
    params_170 = this.matchParens();
    body_171 = this.matchCurlies();
    let enf_177 = new Enforester(params_170, List(), this.context);
    let formalParams_178 = enf_177.enforestFormalParameters();
    return new Term(type_176, {name: name_169, isGenerator: isGenerator_173, params: formalParams_178, body: body_171});
  }
  enforestFunctionExpression() {
    let name_179 = null, params_180, body_181, rest_182;
    let isGenerator_183 = false;
    this.advance();
    let lookahead_184 = this.peek();
    if (this.isPunctuator(lookahead_184, "*")) {
      isGenerator_183 = true;
      this.advance();
      lookahead_184 = this.peek();
    }
    if (!this.isParens(lookahead_184)) {
      name_179 = this.enforestBindingIdentifier();
    }
    params_180 = this.matchParens();
    body_181 = this.matchCurlies();
    let enf_185 = new Enforester(params_180, List(), this.context);
    let formalParams_186 = enf_185.enforestFormalParameters();
    return new Term("FunctionExpression", {name: name_179, isGenerator: isGenerator_183, params: formalParams_186, body: body_181});
  }
  enforestFunctionDeclaration() {
    let name_187, params_188, body_189, rest_190;
    let isGenerator_191 = false;
    this.advance();
    let lookahead_192 = this.peek();
    if (this.isPunctuator(lookahead_192, "*")) {
      isGenerator_191 = true;
      this.advance();
    }
    name_187 = this.enforestBindingIdentifier();
    params_188 = this.matchParens();
    body_189 = this.matchCurlies();
    let enf_193 = new Enforester(params_188, List(), this.context);
    let formalParams_194 = enf_193.enforestFormalParameters();
    return new Term("FunctionDeclaration", {name: name_187, isGenerator: isGenerator_191, params: formalParams_194, body: body_189});
  }
  enforestFormalParameters() {
    let items_195 = [];
    let rest_196 = null;
    while (this.rest.size !== 0) {
      let lookahead = this.peek();
      if (this.isPunctuator(lookahead, "...")) {
        this.matchPunctuator("...");
        rest_196 = this.enforestBindingIdentifier();
        break;
      }
      items_195.push(this.enforestParam());
      this.consumeComma();
    }
    return new Term("FormalParameters", {items: List(items_195), rest: rest_196});
  }
  enforestParam() {
    return this.enforestBindingElement();
  }
  enforestUpdateExpression() {
    let operator_197 = this.matchUnaryOperator();
    return new Term("UpdateExpression", {isPrefix: false, operator: operator_197.val(), operand: this.transformDestructuring(this.term)});
  }
  enforestUnaryExpression() {
    let operator_198 = this.matchUnaryOperator();
    this.opCtx.stack = this.opCtx.stack.push({prec: this.opCtx.prec, combine: this.opCtx.combine});
    this.opCtx.prec = 14;
    this.opCtx.combine = rightTerm_199 => {
      let type_200, term_201, isPrefix_202;
      if (operator_198.val() === "++" || operator_198.val() === "--") {
        type_200 = "UpdateExpression";
        term_201 = this.transformDestructuring(rightTerm_199);
        isPrefix_202 = true;
      } else {
        type_200 = "UnaryExpression";
        isPrefix_202 = undefined;
        term_201 = rightTerm_199;
      }
      return new Term(type_200, {operator: operator_198.val(), operand: term_201, isPrefix: isPrefix_202});
    };
    return EXPR_LOOP_OPERATOR_26;
  }
  enforestConditionalExpression() {
    let test_203 = this.opCtx.combine(this.term);
    if (this.opCtx.stack.size > 0) {
      let {prec, combine} = this.opCtx.stack.last();
      this.opCtx.stack = this.opCtx.stack.pop();
      this.opCtx.prec = prec;
      this.opCtx.combine = combine;
    }
    this.matchPunctuator("?");
    let enf_204 = new Enforester(this.rest, List(), this.context);
    let consequent_205 = enf_204.enforestExpressionLoop();
    enf_204.matchPunctuator(":");
    enf_204 = new Enforester(enf_204.rest, List(), this.context);
    let alternate_206 = enf_204.enforestExpressionLoop();
    this.rest = enf_204.rest;
    return new Term("ConditionalExpression", {test: test_203, consequent: consequent_205, alternate: alternate_206});
  }
  enforestBinaryExpression() {
    let leftTerm_207 = this.term;
    let opStx_208 = this.peek();
    let op_209 = opStx_208.val();
    let opPrec_210 = getOperatorPrec(op_209);
    let opAssoc_211 = getOperatorAssoc(op_209);
    if (operatorLt(this.opCtx.prec, opPrec_210, opAssoc_211)) {
      this.opCtx.stack = this.opCtx.stack.push({prec: this.opCtx.prec, combine: this.opCtx.combine});
      this.opCtx.prec = opPrec_210;
      this.opCtx.combine = rightTerm_212 => {
        return new Term("BinaryExpression", {left: leftTerm_207, operator: opStx_208, right: rightTerm_212});
      };
      this.advance();
      return EXPR_LOOP_OPERATOR_26;
    } else {
      let term = this.opCtx.combine(leftTerm_207);
      let {prec, combine} = this.opCtx.stack.last();
      this.opCtx.stack = this.opCtx.stack.pop();
      this.opCtx.prec = prec;
      this.opCtx.combine = combine;
      return term;
    }
  }
  enforestTemplateElements() {
    let lookahead_213 = this.matchTemplate();
    let elements_214 = lookahead_213.token.items.map(it_215 => {
      if (it_215 instanceof Syntax && it_215.isDelimiter()) {
        let enf = new Enforester(it_215.inner(), List(), this.context);
        return enf.enforest("expression");
      }
      return new Term("TemplateElement", {rawValue: it_215.slice.text});
    });
    return elements_214;
  }
  expandMacro(enforestType_216) {
    let name_217 = this.advance();
    let syntaxTransform_218 = this.getCompiletimeTransform(name_217);
    if (syntaxTransform_218 == null || typeof syntaxTransform_218.value !== "function") {
      throw this.createError(name_217, "the macro name was not bound to a value that could be invoked");
    }
    let useSiteScope_219 = freshScope("u");
    let introducedScope_220 = freshScope("i");
    this.context.useScope = useSiteScope_219;
    let ctx_221 = new MacroContext(this, name_217, this.context, useSiteScope_219, introducedScope_220);
    let result_222 = sanitizeReplacementValues(syntaxTransform_218.value.call(null, ctx_221));
    if (!List.isList(result_222)) {
      throw this.createError(name_217, "macro must return a list but got: " + result_222);
    }
    result_222 = result_222.map(stx_223 => {
      if (!(stx_223 && typeof stx_223.addScope === "function")) {
        throw this.createError(name_217, "macro must return syntax objects or terms but got: " + stx_223);
      }
      return stx_223.addScope(introducedScope_220, this.context.bindings, {flip: true});
    });
    return result_222;
  }
  consumeSemicolon() {
    let lookahead_224 = this.peek();
    if (lookahead_224 && this.isPunctuator(lookahead_224, ";")) {
      this.advance();
    }
  }
  consumeComma() {
    let lookahead_225 = this.peek();
    if (lookahead_225 && this.isPunctuator(lookahead_225, ",")) {
      this.advance();
    }
  }
  isTerm(term_226) {
    return term_226 && term_226 instanceof Term;
  }
  isEOF(term_227) {
    return term_227 && term_227 instanceof Syntax && term_227.isEOF();
  }
  isIdentifier(term_228, val_229 = null) {
    return term_228 && term_228 instanceof Syntax && term_228.isIdentifier() && (val_229 === null || term_228.val() === val_229);
  }
  isPropertyName(term_230) {
    return this.isIdentifier(term_230) || this.isKeyword(term_230) || this.isNumericLiteral(term_230) || this.isStringLiteral(term_230) || this.isBrackets(term_230);
  }
  isNumericLiteral(term_231) {
    return term_231 && term_231 instanceof Syntax && term_231.isNumericLiteral();
  }
  isStringLiteral(term_232) {
    return term_232 && term_232 instanceof Syntax && term_232.isStringLiteral();
  }
  isTemplate(term_233) {
    return term_233 && term_233 instanceof Syntax && term_233.isTemplate();
  }
  isBooleanLiteral(term_234) {
    return term_234 && term_234 instanceof Syntax && term_234.isBooleanLiteral();
  }
  isNullLiteral(term_235) {
    return term_235 && term_235 instanceof Syntax && term_235.isNullLiteral();
  }
  isRegularExpression(term_236) {
    return term_236 && term_236 instanceof Syntax && term_236.isRegularExpression();
  }
  isParens(term_237) {
    return term_237 && term_237 instanceof Syntax && term_237.isParens();
  }
  isBraces(term_238) {
    return term_238 && term_238 instanceof Syntax && term_238.isBraces();
  }
  isBrackets(term_239) {
    return term_239 && term_239 instanceof Syntax && term_239.isBrackets();
  }
  isAssign(term_240) {
    if (this.isPunctuator(term_240)) {
      switch (term_240.val()) {
        case "=":
        case "|=":
        case "^=":
        case "&=":
        case "<<=":
        case ">>=":
        case ">>>=":
        case "+=":
        case "-=":
        case "*=":
        case "/=":
        case "%=":
          return true;
        default:
          return false;
      }
    }
    return false;
  }
  isKeyword(term_241, val_242 = null) {
    return term_241 && term_241 instanceof Syntax && term_241.isKeyword() && (val_242 === null || term_241.val() === val_242);
  }
  isPunctuator(term_243, val_244 = null) {
    return term_243 && term_243 instanceof Syntax && term_243.isPunctuator() && (val_244 === null || term_243.val() === val_244);
  }
  isOperator(term_245) {
    return term_245 && term_245 instanceof Syntax && isOperator(term_245);
  }
  isUpdateOperator(term_246) {
    return term_246 && term_246 instanceof Syntax && term_246.isPunctuator() && (term_246.val() === "++" || term_246.val() === "--");
  }
  isFnDeclTransform(term_247) {
    return term_247 && term_247 instanceof Syntax && this.context.env.get(term_247.resolve()) === FunctionDeclTransform;
  }
  isVarDeclTransform(term_248) {
    return term_248 && term_248 instanceof Syntax && this.context.env.get(term_248.resolve()) === VariableDeclTransform;
  }
  isLetDeclTransform(term_249) {
    return term_249 && term_249 instanceof Syntax && this.context.env.get(term_249.resolve()) === LetDeclTransform;
  }
  isConstDeclTransform(term_250) {
    return term_250 && term_250 instanceof Syntax && this.context.env.get(term_250.resolve()) === ConstDeclTransform;
  }
  isSyntaxDeclTransform(term_251) {
    return term_251 && term_251 instanceof Syntax && this.context.env.get(term_251.resolve()) === SyntaxDeclTransform;
  }
  isSyntaxrecDeclTransform(term_252) {
    return term_252 && term_252 instanceof Syntax && this.context.env.get(term_252.resolve()) === SyntaxrecDeclTransform;
  }
  isSyntaxTemplate(term_253) {
    return term_253 && term_253 instanceof Syntax && term_253.isSyntaxTemplate();
  }
  isSyntaxQuoteTransform(term_254) {
    return term_254 && term_254 instanceof Syntax && this.context.env.get(term_254.resolve()) === SyntaxQuoteTransform;
  }
  isReturnStmtTransform(term_255) {
    return term_255 && term_255 instanceof Syntax && this.context.env.get(term_255.resolve()) === ReturnStatementTransform;
  }
  isWhileTransform(term_256) {
    return term_256 && term_256 instanceof Syntax && this.context.env.get(term_256.resolve()) === WhileTransform;
  }
  isForTransform(term_257) {
    return term_257 && term_257 instanceof Syntax && this.context.env.get(term_257.resolve()) === ForTransform;
  }
  isSwitchTransform(term_258) {
    return term_258 && term_258 instanceof Syntax && this.context.env.get(term_258.resolve()) === SwitchTransform;
  }
  isBreakTransform(term_259) {
    return term_259 && term_259 instanceof Syntax && this.context.env.get(term_259.resolve()) === BreakTransform;
  }
  isContinueTransform(term_260) {
    return term_260 && term_260 instanceof Syntax && this.context.env.get(term_260.resolve()) === ContinueTransform;
  }
  isDoTransform(term_261) {
    return term_261 && term_261 instanceof Syntax && this.context.env.get(term_261.resolve()) === DoTransform;
  }
  isDebuggerTransform(term_262) {
    return term_262 && term_262 instanceof Syntax && this.context.env.get(term_262.resolve()) === DebuggerTransform;
  }
  isWithTransform(term_263) {
    return term_263 && term_263 instanceof Syntax && this.context.env.get(term_263.resolve()) === WithTransform;
  }
  isTryTransform(term_264) {
    return term_264 && term_264 instanceof Syntax && this.context.env.get(term_264.resolve()) === TryTransform;
  }
  isThrowTransform(term_265) {
    return term_265 && term_265 instanceof Syntax && this.context.env.get(term_265.resolve()) === ThrowTransform;
  }
  isIfTransform(term_266) {
    return term_266 && term_266 instanceof Syntax && this.context.env.get(term_266.resolve()) === IfTransform;
  }
  isNewTransform(term_267) {
    return term_267 && term_267 instanceof Syntax && this.context.env.get(term_267.resolve()) === NewTransform;
  }
  isCompiletimeTransform(term_268) {
    return term_268 && term_268 instanceof Syntax && (this.context.env.get(term_268.resolve()) instanceof CompiletimeTransform || this.context.store.get(term_268.resolve()) instanceof CompiletimeTransform);
  }
  getCompiletimeTransform(term_269) {
    if (this.context.env.has(term_269.resolve())) {
      return this.context.env.get(term_269.resolve());
    }
    return this.context.store.get(term_269.resolve());
  }
  lineNumberEq(a_270, b_271) {
    if (!(a_270 && b_271)) {
      return false;
    }
    assert(a_270 instanceof Syntax, "expecting a syntax object");
    assert(b_271 instanceof Syntax, "expecting a syntax object");
    return a_270.lineNumber() === b_271.lineNumber();
  }
  matchIdentifier(val_272) {
    let lookahead_273 = this.advance();
    if (this.isIdentifier(lookahead_273)) {
      return lookahead_273;
    }
    throw this.createError(lookahead_273, "expecting an identifier");
  }
  matchKeyword(val_274) {
    let lookahead_275 = this.advance();
    if (this.isKeyword(lookahead_275, val_274)) {
      return lookahead_275;
    }
    throw this.createError(lookahead_275, "expecting " + val_274);
  }
  matchLiteral() {
    let lookahead_276 = this.advance();
    if (this.isNumericLiteral(lookahead_276) || this.isStringLiteral(lookahead_276) || this.isBooleanLiteral(lookahead_276) || this.isNullLiteral(lookahead_276) || this.isTemplate(lookahead_276) || this.isRegularExpression(lookahead_276)) {
      return lookahead_276;
    }
    throw this.createError(lookahead_276, "expecting a literal");
  }
  matchStringLiteral() {
    let lookahead_277 = this.advance();
    if (this.isStringLiteral(lookahead_277)) {
      return lookahead_277;
    }
    throw this.createError(lookahead_277, "expecting a string literal");
  }
  matchTemplate() {
    let lookahead_278 = this.advance();
    if (this.isTemplate(lookahead_278)) {
      return lookahead_278;
    }
    throw this.createError(lookahead_278, "expecting a template literal");
  }
  matchParens() {
    let lookahead_279 = this.advance();
    if (this.isParens(lookahead_279)) {
      return lookahead_279.inner();
    }
    throw this.createError(lookahead_279, "expecting parens");
  }
  matchCurlies() {
    let lookahead_280 = this.advance();
    if (this.isBraces(lookahead_280)) {
      return lookahead_280.inner();
    }
    throw this.createError(lookahead_280, "expecting curly braces");
  }
  matchSquares() {
    let lookahead_281 = this.advance();
    if (this.isBrackets(lookahead_281)) {
      return lookahead_281.inner();
    }
    throw this.createError(lookahead_281, "expecting sqaure braces");
  }
  matchUnaryOperator() {
    let lookahead_282 = this.advance();
    if (isUnaryOperator(lookahead_282)) {
      return lookahead_282;
    }
    throw this.createError(lookahead_282, "expecting a unary operator");
  }
  matchPunctuator(val_283) {
    let lookahead_284 = this.advance();
    if (this.isPunctuator(lookahead_284)) {
      if (typeof val_283 !== "undefined") {
        if (lookahead_284.val() === val_283) {
          return lookahead_284;
        } else {
          throw this.createError(lookahead_284, "expecting a " + val_283 + " punctuator");
        }
      }
      return lookahead_284;
    }
    throw this.createError(lookahead_284, "expecting a punctuator");
  }
  createError(stx_285, message_286) {
    let ctx_287 = "";
    let offending_288 = stx_285;
    if (this.rest.size > 0) {
      ctx_287 = this.rest.slice(0, 20).map(term_289 => {
        if (term_289.isDelimiter()) {
          return term_289.inner();
        }
        return List.of(term_289);
      }).flatten().map(s_290 => {
        if (s_290 === offending_288) {
          return "__" + s_290.val() + "__";
        }
        return s_290.val();
      }).join(" ");
    } else {
      ctx_287 = offending_288.toString();
    }
    return new Error(message_286 + "\n" + ctx_287);
  }
}
