const unaryOperators_402 = {"+": true, "-": true, "!": true, "~": true, "++": true, "--": true, typeof: true, void: true, delete: true};
const binaryOperatorPrecedence_403 = {"*": 13, "/": 13, "%": 13, "+": 12, "-": 12, ">>": 11, "<<": 11, ">>>": 11, "<": 10, "<=": 10, ">": 10, ">=": 10, in: 10, instanceof: 10, "==": 9, "!=": 9, "===": 9, "!==": 9, "&": 8, "^": 7, "|": 6, "&&": 5, "||": 4};
var operatorAssoc_404 = {"*": "left", "/": "left", "%": "left", "+": "left", "-": "left", ">>": "left", "<<": "left", ">>>": "left", "<": "left", "<=": "left", ">": "left", ">=": "left", in: "left", instanceof: "left", "==": "left", "!=": "left", "===": "left", "!==": "left", "&": "left", "^": "left", "|": "left", "&&": "left", "||": "left"};
export function operatorLt(left_405, right_406, assoc_407) {
  if (assoc_407 === "left") {
    return left_405 < right_406;
  } else {
    return left_405 <= right_406;
  }
}
export function getOperatorPrec(op_408) {
  return binaryOperatorPrecedence_403[op_408];
}
export function getOperatorAssoc(op_409) {
  return operatorAssoc_404[op_409];
}
export function isUnaryOperator(op_410) {
  return (op_410.isPunctuator() || op_410.isIdentifier() || op_410.isKeyword()) && unaryOperators_402.hasOwnProperty(op_410.val());
}
export function isOperator(op_411) {
  if (op_411.isPunctuator() || op_411.isIdentifier() || op_411.isKeyword()) {
    return binaryOperatorPrecedence_403.hasOwnProperty(op_411) || unaryOperators_402.hasOwnProperty(op_411.val());
  }
  return false;
}
