import Term from "./terms";
import {gensym} from "./symbol";
import {VarBindingTransform} from "./transforms";
import {assert} from "./errors";
export default class ScopeApplyingReducer {
  constructor(scope_0, context_1, phase_2 = 0) {
    this.context = context_1;
    this.scope = scope_0;
    this.phase = phase_2;
  }
  transform(term_3) {
    let field_4 = "transform" + term_3.type;
    if (typeof this[field_4] === "function") {
      return this[field_4](term_3);
    }
    assert(false, "transform not implemented yet for: " + term_3.type);
  }
  transformFormalParameters(term_5) {
    let rest_6 = term_5.rest == null ? null : this.transform(term_5.rest);
    return new Term("FormalParameters", {items: term_5.items.map(it_7 => this.transform(it_7)), rest: rest_6});
  }
  transformBindingWithDefault(term_8) {
    return new Term("BindingWithDefault", {binding: this.transform(term_8.binding), init: term_8.init});
  }
  transformObjectBinding(term_9) {
    return term_9;
  }
  transformBindingPropertyIdentifier(term_10) {
    return new Term("BindingPropertyIdentifier", {binding: this.transform(term_10.binding), init: term_10.init});
  }
  transformBindingPropertyProperty(term_11) {
    return new Term("BindingPropertyProperty", {name: term_11.name, binding: this.transform(term_11.binding)});
  }
  transformArrayBinding(term_12) {
    return new Term("ArrayBinding", {elements: term_12.elements.map(el_13 => this.transform(el_13)), restElement: term_12.restElement == null ? null : this.transform(term_12.restElement)});
  }
  transformBindingIdentifier(term_14) {
    let name_15 = term_14.name.addScope(this.scope, this.context.bindings);
    let newBinding_16 = gensym(name_15.val());
    this.context.env.set(newBinding_16.toString(), new VarBindingTransform(name_15));
    this.context.bindings.add(name_15, {binding: newBinding_16, phase: this.phase, skipDup: true});
    return new Term("BindingIdentifier", {name: name_15});
  }
}
