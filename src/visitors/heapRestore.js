const t = require('babel-types')


module.exports = {
    MemberExpression(path) {
        if(path.node.object && path.node.property && path.node.object.name == 'delorean' && path.node.property.name == 'insertTimepoint'){
            var snapshotCall = path.findParent(path => path.isCallExpression());  

            var itIsInLoop = false
            parent = path.context.parentPath;
            while(parent){
                parent = parent.context.parentPath;
                if(parent){
                    if(parent.node.type == 'ForStatement' || parent.node.type == 'DoWhileStatement' || parent.node.type == 'WhileStatement'){
                        itIsInLoop = true;
                        break;
                    }
                }
            }

            snapshotCall.insertBefore(
                t.expressionStatement(
                    t.callExpression(
                        t.memberExpression(
                            t.memberExpression(
                                t.identifier('heap'),
                                t.identifier('dependencies'),
                                false     
                            ),
                            t.identifier('map'),
                            false
                        ),
                        [
                            t.arrowFunctionExpression(
                                [t.identifier('dependecy')],
                                t.blockStatement(
                                    [   
                                        t.ifStatement( 
                                            t.callExpression(
                                                t.identifier('eval'),
                                                [
                                                    t.binaryExpression(
                                                        "+",
                                                        t.binaryExpression(
                                                            "+",
                                                            t.stringLiteral('typeof '),
                                                            t.callExpression(
                                                                t.memberExpression(
                                                                    t.memberExpression(
                                                                        t.identifier('dependecy'),
                                                                        t.identifier('name'),
                                                                        false
                                                                    ),
                                                                    t.identifier('toString'),
                                                                    false
                                                                ),
                                                                []
                                                            )
                                                        ),
                                                        t.stringLiteral("!='undefined'")
                                                    )
                                                ]
                                            ),
                                            t.blockStatement(
                                                [
                                                    t.expressionStatement(
                                                        t.assignmentExpression(
                                                            '=',
                                                            t.memberExpression(
                                                                t.identifier('tempValueStore'),
                                                                t.callExpression(
                                                                    t.memberExpression(
                                                                        t.memberExpression(
                                                                            t.identifier('dependecy'),
                                                                            t.identifier('name'),
                                                                            false
                                                                        ),
                                                                        t.identifier('toString'),
                                                                        false
                                                                    ),
                                                                    []
                                                                ),
                                                                true
                                                            ),
                                                            t.callExpression(
                                                                t.identifier('eval'),
                                                                [
                                                                    t.callExpression(
                                                                        t.memberExpression(
                                                                            t.memberExpression(
                                                                                t.identifier('dependecy'),
                                                                                t.identifier('name'),
                                                                                false
                                                                            ),
                                                                            t.identifier('toString'),
                                                                            false
                                                                        ),
                                                                        []
                                                                    )
                                                                ]
                                                            )
                                                        )
                                                    )
                                                ]
                                            ),
                                            t.blockStatement(
                                                [
                                                    t.expressionStatement(
                                                        t.assignmentExpression(
                                                            "=",
                                                            t.memberExpression(
                                                                t.identifier('tempValueStore'),
                                                                t.callExpression(
                                                                    t.memberExpression(
                                                                        t.memberExpression(
                                                                            t.identifier('dependecy'),
                                                                            t.identifier('name'),
                                                                            false
                                                                        ),
                                                                        t.identifier('toString'),
                                                                        false
                                                                    ),
                                                                    []
                                                                ),
                                                                true
                                                            ),
                                                            t.identifier("undefined")

                                                        )
                                                    )
                                                ]
                                            )
                                        )                                     
                                    ],
                                    []
                                )
                            )
                        ]
                    )
                )
            )
            
            snapshotCall.insertAfter(
                t.ifStatement(
                    t.identifier('fromTheFuture'),
                    t.blockStatement(
                        [   
                            t.variableDeclaration(
                                "let",
                                [
                                    t.variableDeclarator(
                                        t.identifier("snapshot"),
                                        t.callExpression(
                                            t.identifier('restoreHeap'),
                                            [t.identifier('startFrom')]
                                        )
                                    )
                                ]
                            ),
                            t.expressionStatement(
                                t.callExpression(
                                    t.memberExpression(
                                        t.identifier("dependencies"),
                                        t.identifier("map"),
                                        false
                                    ),
                                    [
                                        t.arrowFunctionExpression(
                                            [
                                                t.identifier("key")
                                            ],
                                            t.blockStatement(
                                                [
                                                    t.expressionStatement(
                                                        t.assignmentExpression(
                                                            "=",
                                                            t.identifier("auxSnapshotValue"),
                                                            t.memberExpression(
                                                                t.identifier("snapshot"),
                                                                t.memberExpression(
                                                                    t.identifier("key"),
                                                                    t.identifier("name"),
                                                                    false
                                                                ),
                                                                true
                                                            )
                                                        )
                                                    ),
                                                    t.expressionStatement(
                                                        t.callExpression(
                                                            t.identifier("eval"),
                                                            [
                                                                t.binaryExpression(
                                                                    "+",
                                                                    t.binaryExpression(
                                                                        "+",
                                                                        t.binaryExpression(
                                                                            "+",
                                                                            t.memberExpression(
                                                                                t.identifier("key"),
                                                                                t.identifier("name"),
                                                                                false
                                                                            ),
                                                                            t.stringLiteral(" = document.getElementById('input-")
                                                                        ),
                                                                        t.memberExpression(
                                                                            t.identifier("key"),
                                                                            t.identifier("name"),
                                                                            false
                                                                        )
                                                                    ),
                                                                    t.stringLiteral("').value || undefined || auxSnapshotValue;")
                                                                )
                                                            ]
                                                        )
                                                    )
                                                ]
                                            ),
                                            false
                                        )    
                                    ]
                                )
                            ),
                            t.expressionStatement(
                                t.assignmentExpression(
                                    '=',
                                    t.identifier('fromTheFuture'),
                                    t.booleanLiteral(false)
                                )
                            )
                        ],
                        []
                    ),
                    null
                )               
            ) 
        }
    }
}